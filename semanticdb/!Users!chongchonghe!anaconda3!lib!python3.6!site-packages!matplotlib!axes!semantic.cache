;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("" code nil nil [24 109])
            ("collections" include nil nil [111 146])
            ("six" include nil nil [148 158])
            ("six.moves" include nil nil [159 187])
            ("itertools" include nil nil [189 205])
            ("warnings" include nil nil [206 221])
            ("math" include nil nil [222 233])
            ("operator" include nil nil [234 265])
            ("numpy" include nil nil [267 285])
            ("matplotlib" include nil nil [287 304])
            ("matplotlib" include nil nil [306 334])
            ("" code nil nil [364 453])
            ("matplotlib" include nil nil [454 486])
            ("matplotlib.colors" include nil nil [487 522])
            ("matplotlib.lines" include nil nil [523 556])
            ("matplotlib.patches" include nil nil [557 594])
            ("matplotlib.artist" include nil nil [595 630])
            ("matplotlib.transforms" include nil nil [631 674])
            ("matplotlib.ticker" include nil nil [675 710])
            ("matplotlib.axis" include nil nil [711 742])
            ("matplotlib.scale" include nil nil [743 776])
            ("matplotlib.spines" include nil nil [777 812])
            ("matplotlib.font_manager" include nil nil [813 859])
            ("matplotlib.text" include nil nil [860 891])
            ("matplotlib.image" include nil nil [892 925])
            ("matplotlib.offsetbox" include nil nil [926 968])
            ("matplotlib.artist" include nil nil [969 1018])
            ("matplotlib.rcsetup" include nil nil [1020 1057])
            ("matplotlib.rcsetup" include nil nil [1058 1107])
            ("rcParams" variable nil nil [1109 1139])
            ("is_string_like" variable nil nil [1141 1178])
            ("is_sequence_of_strings" variable nil nil [1179 1232])
            ("_hold_msg" variable nil nil [1234 1376])
            ("_process_plot_format" function
               (:documentation "
    Process a MATLAB style color/line style format string.  Return a
    (*linestyle*, *color*) tuple as a result of the processing.  Default
    values are ('-', 'b').  Example format strings include:

    * 'ko': black circles
    * '.b': blue dots
    * 'r--': red dashed lines
    * 'C2--': the third color in the color cycle, dashed lines

    .. seealso::

        :func:`~matplotlib.Line2D.lineStyles` and
        :func:`~matplotlib.pyplot.colors`
            for all possible styles and color format string.
    "
                :arguments 
                  ( ("fmt" variable nil (reparse-symbol function_parameters) [1404 1407]))                  )
                nil [1379 4205])
            ("_process_plot_var_args" type
               (:documentation "
    Process variable length arguments to the plot command, so that
    plot commands like the following are supported::

      plot(t, s)
      plot(t1, s1, t2, s2)
      plot(t1, s1, 'ko', t2, s2)
      plot(t1, s1, 'ko', t2, s2, 'r--', t3, e3)

    an arbitrary number of *x*, *y*, *fmt* are allowed
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4617 4633])
                            ("self" variable nil (reparse-symbol indented_block_body) [4642 4664])
                            ("self" code nil (reparse-symbol indented_block_body) [4673 4694]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4580 4584])
                            ("axes" variable nil (reparse-symbol function_parameters) [4586 4590])
                            ("command" variable nil (reparse-symbol function_parameters) [4592 4599]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4567 4695])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4717 4721]))                          )
                        (reparse-symbol indented_block_body) [4700 4856])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4878 4882])
                            ("state" variable nil (reparse-symbol function_parameters) [4884 4889]))                          )
                        (reparse-symbol indented_block_body) [4861 4959])
                    ("set_prop_cycle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4983 4987])
                            ("args" variable nil (reparse-symbol function_parameters) [4989 4994])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4996 5004]))                          )
                        (reparse-symbol indented_block_body) [4964 5332])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5350 5354])
                            ("args" variable nil (reparse-symbol function_parameters) [5356 5361])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5363 5371]))                          )
                        (reparse-symbol indented_block_body) [5337 6045])
                    ("get_next_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6069 6073]))                          
                        :documentation "
        Return the next color in the cycle.
        ")
                        (reparse-symbol indented_block_body) [6050 6261])
                    ("set_lineprops" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6284 6288])
                            ("line" variable nil (reparse-symbol function_parameters) [6290 6294])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6296 6304]))                          )
                        (reparse-symbol indented_block_body) [6266 6412])
                    ("set_patchprops" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6436 6440])
                            ("fill_poly" variable nil (reparse-symbol function_parameters) [6442 6451])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6453 6461]))                          )
                        (reparse-symbol indented_block_body) [6417 6575])
                    ("_xy_from_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6596 6600])
                            ("x" variable nil (reparse-symbol function_parameters) [6602 6603])
                            ("y" variable nil (reparse-symbol function_parameters) [6605 6606]))                          )
                        (reparse-symbol indented_block_body) [6580 8423])
                    ("_getdefaults" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8445 8449])
                            ("ignore" variable nil (reparse-symbol function_parameters) [8451 8457])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8459 8466]))                          
                        :documentation "
        Only advance the cycler if the cycler has information that
        is not specified in any of the supplied tuple of dicts.
        Ignore any keys specified in the `ignore` set.

        Returns a copy of defaults dictionary if there are any
        keys that are not found in any of the supplied dictionaries.
        If the supplied dictionaries have non-None values for
        everything the property cycler has, then just return
        an empty dictionary. Ignored keys are excluded from the
        returned dictionary.

        ")
                        (reparse-symbol indented_block_body) [8428 9601])
                    ("_setdefaults" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9623 9627])
                            ("defaults" variable nil (reparse-symbol function_parameters) [9629 9637])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9639 9646]))                          
                        :documentation "
        Given a defaults dictionary, and any other dictionaries,
        update those other dictionaries with information in defaults if
        none of the other dictionaries contains that information.

        ")
                        (reparse-symbol indented_block_body) [9606 10040])
                    ("_makeline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10059 10063])
                            ("x" variable nil (reparse-symbol function_parameters) [10065 10066])
                            ("y" variable nil (reparse-symbol function_parameters) [10068 10069])
                            ("kw" variable nil (reparse-symbol function_parameters) [10071 10073])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10075 10081]))                          )
                        (reparse-symbol indented_block_body) [10045 10320])
                    ("_makefill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10339 10343])
                            ("x" variable nil (reparse-symbol function_parameters) [10345 10346])
                            ("y" variable nil (reparse-symbol function_parameters) [10348 10349])
                            ("kw" variable nil (reparse-symbol function_parameters) [10351 10353])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10355 10361]))                          )
                        (reparse-symbol indented_block_body) [10325 12595])
                    ("_plot_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12615 12619])
                            ("tup" variable nil (reparse-symbol function_parameters) [12621 12624])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [12626 12632]))                          )
                        (reparse-symbol indented_block_body) [12600 14079])
                    ("_grab_next_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14104 14108])
                            ("args" variable nil (reparse-symbol function_parameters) [14110 14115])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [14117 14125]))                          )
                        (reparse-symbol indented_block_body) [14084 14400]))                  
                :type "class")
                nil [4207 14400])
            ("_AxesBase" type
               (:documentation "
    "
                :superclasses ("martist.Artist")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [14455 14475])
                    ("_shared_x_axes" variable nil (reparse-symbol indented_block_body) [14481 14513])
                    ("_shared_y_axes" variable nil (reparse-symbol indented_block_body) [14518 14550])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14568 14572]))                          )
                        (reparse-symbol indented_block_body) [14556 14697])
                    ("__init__" function
                       (:suite 
                          ( ("martist" code nil (reparse-symbol indented_block_body) [17857 17886])
                            ("if" code nil (reparse-symbol indented_block_body) [17895 18047])
                            ("if" code nil (reparse-symbol indented_block_body) [18055 18193])
                            ("self" variable nil (reparse-symbol indented_block_body) [18201 18249])
                            ("self" variable nil (reparse-symbol indented_block_body) [18288 18304])
                            ("self" code nil (reparse-symbol indented_block_body) [18313 18336])
                            ("self" variable nil (reparse-symbol indented_block_body) [18345 18369])
                            ("self" code nil (reparse-symbol indented_block_body) [18378 18398])
                            ("self" variable nil (reparse-symbol indented_block_body) [18407 18428])
                            ("self" variable nil (reparse-symbol indented_block_body) [18437 18458])
                            ("if" code nil (reparse-symbol indented_block_body) [18467 18786])
                            ("if" code nil (reparse-symbol indented_block_body) [18794 19113])
                            ("self" code nil (reparse-symbol indented_block_body) [19121 19142])
                            ("self" code nil (reparse-symbol indented_block_body) [19151 19171])
                            ("self" code nil (reparse-symbol indented_block_body) [19181 19236])
                            ("self" variable nil (reparse-symbol indented_block_body) [19246 19283])
                            ("self" code nil (reparse-symbol indented_block_body) [19354 19371])
                            ("if" code nil (reparse-symbol indented_block_body) [19380 19616])
                            ("if" code nil (reparse-symbol indented_block_body) [19624 19776])
                            ("if" code nil (reparse-symbol indented_block_body) [19784 19857])
                            ("self" variable nil (reparse-symbol indented_block_body) [19865 19892])
                            ("self" variable nil (reparse-symbol indented_block_body) [19901 19924])
                            ("self" variable nil (reparse-symbol indented_block_body) [19933 19977])
                            ("self" variable nil (reparse-symbol indented_block_body) [19987 20020])
                            ("self" variable nil (reparse-symbol indented_block_body) [20030 20064])
                            ("if" code nil (reparse-symbol indented_block_body) [20073 20126])
                            ("self" variable nil (reparse-symbol indented_block_body) [20135 20155])
                            ("self" code nil (reparse-symbol indented_block_body) [20200 20210])
                            ("self" variable nil (reparse-symbol indented_block_body) [20290 20311])
                            ("self" variable nil (reparse-symbol indented_block_body) [20320 20341])
                            ("self" variable nil (reparse-symbol indented_block_body) [20351 20378])
                            ("self" code nil (reparse-symbol indented_block_body) [20387 20410])
                            ("self" code nil (reparse-symbol indented_block_body) [20419 20447])
                            ("if" code nil (reparse-symbol indented_block_body) [20457 20504])
                            ("if" code nil (reparse-symbol indented_block_body) [20512 20559])
                            ("if" code nil (reparse-symbol indented_block_body) [20568 20616])
                            ("if" code nil (reparse-symbol indented_block_body) [20625 20786])
                            ("if" code nil (reparse-symbol indented_block_body) [20795 20956])
                            ("self" code nil (reparse-symbol indented_block_body) [20965 21311])
                            ("self" code nil (reparse-symbol indented_block_body) [21321 21667]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14715 14719])
                            ("fig" variable nil (reparse-symbol function_parameters) [14721 14724])
                            ("rect" variable nil (reparse-symbol function_parameters) [14726 14730])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [14749 14758])
                            ("frameon" variable nil (reparse-symbol function_parameters) [14815 14822])
                            ("sharex" variable nil (reparse-symbol function_parameters) [14846 14852])
                            ("sharey" variable nil (reparse-symbol function_parameters) [14910 14916])
                            ("label" variable nil (reparse-symbol function_parameters) [14974 14979])
                            ("xscale" variable nil (reparse-symbol function_parameters) [15001 15007])
                            ("yscale" variable nil (reparse-symbol function_parameters) [15031 15037])
                            ("axisbg" variable nil (reparse-symbol function_parameters) [15061 15067])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [15126 15134]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14702 21668])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21690 21694]))                          )
                        (reparse-symbol indented_block_body) [21673 21912])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21934 21938])
                            ("state" variable nil (reparse-symbol function_parameters) [21940 21945]))                          )
                        (reparse-symbol indented_block_body) [21917 22359])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22386 22390])
                            ("args" variable nil (reparse-symbol function_parameters) [22392 22397])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [22399 22407]))                          
                        :documentation "
        get the axes bounding box in display space; *args* and
        *kwargs* are empty
        ")
                        (reparse-symbol indented_block_body) [22364 22780])
                    ("_init_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22800 22804]))                          )
                        (reparse-symbol indented_block_body) [22785 23213])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23233 23237])
                            ("fig" variable nil (reparse-symbol function_parameters) [23239 23242]))                          
                        :documentation "
        Set the class:`~matplotlib.axes.Axes` figure

        accepts a class:`~matplotlib.figure.Figure` instance
        ")
                        (reparse-symbol indented_block_body) [23218 23849])
                    ("_set_lim_and_transforms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23882 23886]))                          
                        :documentation "
        set the *dataLim* and *viewLim*
        :class:`~matplotlib.transforms.Bbox` attributes and the
        *transScale*, *transData*, *transLimits* and *transAxes*
        transformations.

        .. note::

            This method is primarily used by rectilinear projections
            of the :class:`~matplotlib.axes.Axes` class, and is meant
            to be overridden by new kinds of projection axes that need
            different transformations and limits. (See
            :class:`~matplotlib.projections.polar.PolarAxes` for an
            example.

        ")
                        (reparse-symbol indented_block_body) [23854 25569])
                    ("get_xaxis_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25598 25602])
                            ("which" variable nil (reparse-symbol function_parameters) [25604 25609]))                          
                        :documentation "
        Get the transformation used for drawing x-axis labels, ticks
        and gridlines.  The x-direction is in data coordinates and the
        y-direction is in axis coordinates.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ")
                        (reparse-symbol indented_block_body) [25574 26541])
                    ("get_xaxis_text1_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26576 26580])
                            ("pad_points" variable nil (reparse-symbol function_parameters) [26582 26592]))                          
                        :documentation "
        Get the transformation used for drawing x-axis labels, which
        will add the given amount of padding (in points) between the
        axes and the label.  The x-direction is in data coordinates
        and the y-direction is in axis coordinates.  Returns a
        3-tuple of the form::

          (transform, valign, halign)

        where *valign* and *halign* are requested alignments for the
        text.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ")
                        (reparse-symbol indented_block_body) [26546 27619])
                    ("get_xaxis_text2_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27654 27658])
                            ("pad_points" variable nil (reparse-symbol function_parameters) [27660 27670]))                          
                        :documentation "
        Get the transformation used for drawing the secondary x-axis
        labels, which will add the given amount of padding (in points)
        between the axes and the label.  The x-direction is in data
        coordinates and the y-direction is in axis coordinates.
        Returns a 3-tuple of the form::

          (transform, valign, halign)

        where *valign* and *halign* are requested alignments for the
        text.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ")
                        (reparse-symbol indented_block_body) [27624 28707])
                    ("get_yaxis_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28736 28740])
                            ("which" variable nil (reparse-symbol function_parameters) [28742 28747]))                          
                        :documentation "
        Get the transformation used for drawing y-axis labels, ticks
        and gridlines.  The x-direction is in axis coordinates and the
        y-direction is in data coordinates.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ")
                        (reparse-symbol indented_block_body) [28712 29679])
                    ("get_yaxis_text1_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29714 29718])
                            ("pad_points" variable nil (reparse-symbol function_parameters) [29720 29730]))                          
                        :documentation "
        Get the transformation used for drawing y-axis labels, which
        will add the given amount of padding (in points) between the
        axes and the label.  The x-direction is in axis coordinates
        and the y-direction is in data coordinates.  Returns a 3-tuple
        of the form::

          (transform, valign, halign)

        where *valign* and *halign* are requested alignments for the
        text.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ")
                        (reparse-symbol indented_block_body) [29684 30758])
                    ("get_yaxis_text2_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30793 30797])
                            ("pad_points" variable nil (reparse-symbol function_parameters) [30799 30809]))                          
                        :documentation "
        Get the transformation used for drawing the secondary y-axis
        labels, which will add the given amount of padding (in points)
        between the axes and the label.  The x-direction is in axis
        coordinates and the y-direction is in data coordinates.
        Returns a 3-tuple of the form::

          (transform, valign, halign)

        where *valign* and *halign* are requested alignments for the
        text.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ")
                        (reparse-symbol indented_block_body) [30763 31845])
                    ("_update_transScale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31873 31877]))                          )
                        (reparse-symbol indented_block_body) [31850 32245])
                    ("get_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32267 32271])
                            ("original" variable nil (reparse-symbol function_parameters) [32273 32281]))                          )
                        (reparse-symbol indented_block_body) [32250 32479])
                    ("set_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32501 32505])
                            ("pos" variable nil (reparse-symbol function_parameters) [32507 32510])
                            ("which" variable nil (reparse-symbol function_parameters) [32512 32517]))                          
                        :documentation "Set the axes position

        The expected shape of ``pos`` is::

          pos = [left, bottom, width, height]

        in relative 0,1 coords, or *pos* can be a
        :class:`~matplotlib.transforms.Bbox`

        There are two position variables: one which is ultimately
        used, but which may be modified by :meth:`apply_aspect`, and a
        second which is the starting point for :meth:`apply_aspect`.


        Optional keyword arguments:
          *which*

            ==========   ====================
            value        description
            ==========   ====================
            'active'     to change the first
            'original'   to change the second
            'both'       to change both
            ==========   ====================

        ")
                        (reparse-symbol indented_block_body) [32484 33625])
                    ("reset_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33649 33653]))                          
                        :documentation "Make the original position the active position")
                        (reparse-symbol indented_block_body) [33630 33811])
                    ("set_axes_locator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33837 33841])
                            ("locator" variable nil (reparse-symbol function_parameters) [33843 33850]))                          
                        :documentation "
        set axes_locator

        ACCEPT: a callable object which takes an axes instance and renderer and
                 returns a bbox.
        ")
                        (reparse-symbol indented_block_body) [33816 34079])
                    ("get_axes_locator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34105 34109]))                          
                        :documentation "
        return axes_locator
        ")
                        (reparse-symbol indented_block_body) [34084 34198])
                    ("_set_artist_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34225 34229])
                            ("a" variable nil (reparse-symbol function_parameters) [34231 34232]))                          
                        :documentation "set the boilerplate props for artists added to axes")
                        (reparse-symbol indented_block_body) [34203 34501])
                    ("_gen_axes_patch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34526 34530]))                          
                        :documentation "
        Returns the patch used to draw the background of the axes.  It
        is also used as the clipping path for any data elements on the
        axes.

        In the standard axes, this is a rectangle, but in other
        projections it may not be.

        .. note::

            Intended to be overridden by new projection types.

        ")
                        (reparse-symbol indented_block_body) [34506 34953])
                    ("_gen_axes_spines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34979 34983])
                            ("locations" variable nil (reparse-symbol function_parameters) [34985 34994])
                            ("offset" variable nil (reparse-symbol function_parameters) [35001 35007])
                            ("units" variable nil (reparse-symbol function_parameters) [35013 35018]))                          
                        :documentation "
        Returns a dict whose keys are spine names and values are
        Line2D or Patch instances. Each element is used to draw a
        spine of the axes.

        In the standard axes, this is a single line segment, but in
        other projections it may not be.

        .. note::

            Intended to be overridden by new projection types.

        ")
                        (reparse-symbol indented_block_body) [34958 35696])
                    ("cla" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35709 35713]))                          
                        :documentation "Clear the current axes.")
                        (reparse-symbol indented_block_body) [35701 40916])
                    ("" code nil (reparse-symbol indented_block_body) [40952 40985])
                    ("axesPatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41004 41008]))                          )
                        (reparse-symbol indented_block_body) [40990 41037])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41052 41056]))                          
                        :documentation "clear the axes")
                        (reparse-symbol indented_block_body) [41042 41107])
                    ("get_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41130 41134]))                          )
                        (reparse-symbol indented_block_body) [41112 41179])
                    ("get_fc" variable nil (reparse-symbol indented_block_body) [41183 41205])
                    ("set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41229 41233])
                            ("color" variable nil (reparse-symbol function_parameters) [41235 41240]))                          )
                        (reparse-symbol indented_block_body) [41211 41322])
                    ("set_fc" variable nil (reparse-symbol indented_block_body) [41326 41348])
                    ("set_prop_cycle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41373 41377])
                            ("args" variable nil (reparse-symbol function_parameters) [41379 41384])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [41386 41394]))                          
                        :documentation "
        Set the property cycle for any future plot commands on this Axes.

        set_prop_cycle(arg)
        set_prop_cycle(label, itr)
        set_prop_cycle(label1=itr1[, label2=itr2[, ...]])

        Form 1 simply sets given `Cycler` object.

        Form 2 creates and sets  a `Cycler` from a label and an iterable.

        Form 3 composes and sets  a `Cycler` as an inner product of the
        pairs of keyword arguments. In other words, all of the
        iterables are cycled simultaneously, as if through zip().

        Parameters
        ----------
        arg : Cycler
            Set the given Cycler.
            Can also be `None` to reset to the cycle defined by the
            current style.

        label : str
            The property key. Must be a valid `Artist` property.
            For example, 'color' or 'linestyle'. Aliases are allowed,
            such as 'c' for 'color' and 'lw' for 'linewidth'.

        itr : iterable
            Finite-length iterable of the property values. These values
            are validated and will raise a ValueError if invalid.

        See Also
        --------
            :func:`cycler`      Convenience function for creating your
                                own cyclers.

        ")
                        (reparse-symbol indented_block_body) [41354 43077])
                    ("set_color_cycle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43102 43106])
                            ("clist" variable nil (reparse-symbol function_parameters) [43108 43113]))                          
                        :documentation "
        Set the color cycle for any future plot commands on this Axes.

        *clist* is a list of mpl color specifiers.

        .. deprecated:: 1.5
        ")
                        (reparse-symbol indented_block_body) [43082 43729])
                    ("" code nil (reparse-symbol indented_block_body) [43751 43758])
                    ("ishold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43774 43778]))                          
                        :documentation "return the HOLD status of the axes

        The `hold` mechanism is deprecated and will be removed in
        v3.0.
        ")
                        (reparse-symbol indented_block_body) [43763 43947])
                    ("" code nil (reparse-symbol indented_block_body) [43969 43995])
                    ("hold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44009 44013])
                            ("b" variable nil (reparse-symbol function_parameters) [44015 44016]))                          
                        :documentation "
        Set the hold state

        The ``hold`` mechanism is deprecated and will be removed in
        v3.0.  The behavior will remain consistent with the
        long-time default value of True.

        If *hold* is *None* (default), toggle the *hold* state.  Else
        set the *hold* state to boolean value *b*.

        Examples::

          # toggle hold
          hold()

          # turn hold on
          hold(True)

          # turn hold off
          hold(False)

        When hold is *True*, subsequent plot commands will be added to
        the current axes.  When hold is *False*, the current axes and
        figure will be cleared on the next plot command

        ")
                        (reparse-symbol indented_block_body) [44000 44827])
                    ("get_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44847 44851]))                          )
                        (reparse-symbol indented_block_body) [44832 44882])
                    ("set_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44902 44906])
                            ("aspect" variable nil (reparse-symbol function_parameters) [44908 44914])
                            ("adjustable" variable nil (reparse-symbol function_parameters) [44916 44926])
                            ("anchor" variable nil (reparse-symbol function_parameters) [44933 44939]))                          
                        :documentation "
        *aspect*

          ========   ================================================
          value      description
          ========   ================================================
          'auto'     automatic; fill position rectangle with data
          'equal'    same scaling from data to plot units for x and y
           num       a circle will be stretched such that the height
                     is num times the width. aspect=1 is the same as
                     aspect='equal'.
          ========   ================================================

        *adjustable*

          ============   =====================================
          value          description
          ============   =====================================
          'box'          change physical size of axes
          'datalim'      change xlim or ylim
          'box-forced'   same as 'box', but axes can be shared
          ============   =====================================

        'box' does not allow axes sharing, as this can cause
        unintended side effect. For cases when sharing axes is
        fine, use 'box-forced'.

        *anchor*

          =====   =====================
          value   description
          =====   =====================
          'C'     centered
          'SW'    lower left corner
          'S'     middle of bottom edge
          'SE'    lower right corner
          etc.
          =====   =====================
        ")
                        (reparse-symbol indented_block_body) [44887 46829])
                    ("get_adjustable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46853 46857]))                          )
                        (reparse-symbol indented_block_body) [46834 46892])
                    ("set_adjustable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46916 46920])
                            ("adjustable" variable nil (reparse-symbol function_parameters) [46922 46932]))                          
                        :documentation "
        ACCEPTS: [ 'box' | 'datalim' | 'box-forced']
        ")
                        (reparse-symbol indented_block_body) [46897 47447])
                    ("get_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47467 47471]))                          )
                        (reparse-symbol indented_block_body) [47452 47502])
                    ("set_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47522 47526])
                            ("anchor" variable nil (reparse-symbol function_parameters) [47528 47534]))                          
                        :documentation "
        *anchor*

          =====  ============
          value  description
          =====  ============
          'C'    Center
          'SW'   bottom left
          'S'    bottom
          'SE'   bottom right
          'E'    right
          'NE'   top right
          'N'    top
          'NW'   top left
          'W'    left
          =====  ============

        ")
                        (reparse-symbol indented_block_body) [47507 48187])
                    ("get_data_ratio" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48211 48215]))                          
                        :documentation "
        Returns the aspect ratio of the raw data.

        This method is intended to be overridden by new projection
        types.
        ")
                        (reparse-symbol indented_block_body) [48192 48574])
                    ("get_data_ratio_log" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48602 48606]))                          
                        :documentation "
        Returns the aspect ratio of the raw data in log scale.
        Will be used when both axis scales are in log.
        ")
                        (reparse-symbol indented_block_body) [48579 48998])
                    ("apply_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49020 49024])
                            ("position" variable nil (reparse-symbol function_parameters) [49026 49034]))                          
                        :documentation "
        Use :meth:`_aspect` and :meth:`_adjustable` to modify the
        axes box or the view limits.
        ")
                        (reparse-symbol indented_block_body) [49003 53901])
                    ("axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53915 53919])
                            ("v" variable nil (reparse-symbol function_parameters) [53921 53923])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [53925 53933]))                          
                        :documentation "Set axis properties.

        Valid signatures::

          xmin, xmax, ymin, ymax = axis()
          xmin, xmax, ymin, ymax = axis(list_arg)
          xmin, xmax, ymin, ymax = axis(string_arg)
          xmin, xmax, ymin, ymax = axis(**kwargs)

        Parameters
        ----------
        v : list of float or {'on', 'off', 'equal', 'tight', 'scaled',\\
            'normal', 'auto', 'image', 'square'}
            Optional positional argument

            Axis data limits set from a list; or a command relating to axes:

                ========== ================================================
                Value      Description
                ========== ================================================
                'on'       Toggle axis lines and labels on
                'off'      Toggle axis lines and labels off
                'equal'    Equal scaling by changing limits
                'scaled'   Equal scaling by changing box dimensions
                'tight'    Limits set such that all data is shown
                'auto'     Automatic scaling, fill rectangle with data
                'normal'   Same as 'auto'; deprecated
                'image'    'scaled' with axis limits equal to data limits
                'square'   Square plot; similar to 'scaled', but initially\\
                           forcing xmax-xmin = ymax-ymin
                ========== ================================================

        emit : bool, optional
            Passed to set_{x,y}lim functions, if observers
            are notified of axis limit change

        xmin, ymin, xmax, ymax : float, optional
            The axis limits to be set

        Returns
        -------
        xmin, xmax, ymin, ymax : float
            The axis limits

        ")
                        (reparse-symbol indented_block_body) [53906 58890])
                    ("get_legend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58910 58914]))                          
                        :documentation "
        Return the legend.Legend instance, or None if no legend is defined
        ")
                        (reparse-symbol indented_block_body) [58895 59044])
                    ("get_images" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59064 59068]))                          
                        :documentation "return a list of Axes images contained by the Axes")
                        (reparse-symbol indented_block_body) [59049 59195])
                    ("get_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59214 59218]))                          
                        :documentation "Return a list of lines contained by the Axes")
                        (reparse-symbol indented_block_body) [59200 59335])
                    ("get_xaxis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59354 59358]))                          
                        :documentation "Return the XAxis instance")
                        (reparse-symbol indented_block_body) [59340 59427])
                    ("get_xgridlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59451 59455]))                          
                        :documentation "Get the x grid lines as a list of Line2D instances")
                        (reparse-symbol indented_block_body) [59432 59637])
                    ("get_xticklines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59661 59665]))                          
                        :documentation "Get the xtick lines as a list of Line2D instances")
                        (reparse-symbol indented_block_body) [59642 59844])
                    ("get_yaxis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59863 59867]))                          
                        :documentation "Return the YAxis instance")
                        (reparse-symbol indented_block_body) [59849 59936])
                    ("get_ygridlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59960 59964]))                          
                        :documentation "Get the y grid lines as a list of Line2D instances")
                        (reparse-symbol indented_block_body) [59941 60146])
                    ("get_yticklines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60170 60174]))                          
                        :documentation "Get the ytick lines as a list of Line2D instances")
                        (reparse-symbol indented_block_body) [60151 60355])
                    ("_sci" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60404 60408])
                            ("im" variable nil (reparse-symbol function_parameters) [60410 60412]))                          
                        :documentation "
        helper for :func:`~matplotlib.pyplot.sci`;
        do not use elsewhere.
        ")
                        (reparse-symbol indented_block_body) [60395 60962])
                    ("_gci" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60976 60980]))                          
                        :documentation "
        Helper for :func:`~matplotlib.pyplot.gci`;
        do not use elsewhere.
        ")
                        (reparse-symbol indented_block_body) [60967 61123])
                    ("has_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61141 61145]))                          
                        :documentation "
        Return *True* if any artists have been added to axes.

        This should not be used to determine whether the *dataLim*
        need to be updated, and may not actually be useful for
        anything.
        ")
                        (reparse-symbol indented_block_body) [61128 61532])
                    ("add_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61552 61556])
                            ("a" variable nil (reparse-symbol function_parameters) [61558 61559]))                          
                        :documentation "Add any :class:`~matplotlib.artist.Artist` to the axes.

        Use `add_artist` only for artists for which there is no dedicated
        \"add\" method; and if necessary, use a method such as
        `update_datalim` or `update_datalim_numerix` to manually update the
        dataLim if the artist is to be included in autoscaling.

        Returns the artist.
        ")
                        (reparse-symbol indented_block_body) [61537 62172])
                    ("add_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62196 62200])
                            ("collection" variable nil (reparse-symbol function_parameters) [62202 62212])
                            ("autolim" variable nil (reparse-symbol function_parameters) [62214 62221]))                          
                        :documentation "
        Add a :class:`~matplotlib.collections.Collection` instance
        to the axes.

        Returns the collection.
        ")
                        (reparse-symbol indented_block_body) [62177 62912])
                    ("add_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62931 62935])
                            ("image" variable nil (reparse-symbol function_parameters) [62937 62942]))                          
                        :documentation "
        Add a :class:`~matplotlib.image.AxesImage` to the axes.

        Returns the image.
        ")
                        (reparse-symbol indented_block_body) [62917 63336])
                    ("add_line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63354 63358])
                            ("line" variable nil (reparse-symbol function_parameters) [63360 63364]))                          
                        :documentation "
        Add a :class:`~matplotlib.lines.Line2D` to the list of plot
        lines

        Returns the line.
        ")
                        (reparse-symbol indented_block_body) [63341 63889])
                    ("_add_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63908 63912])
                            ("txt" variable nil (reparse-symbol function_parameters) [63914 63917]))                          
                        :documentation "

        ")
                        (reparse-symbol indented_block_body) [63894 64117])
                    ("_update_line_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64146 64150])
                            ("line" variable nil (reparse-symbol function_parameters) [64152 64156]))                          
                        :documentation "
        Figures out the data limit of the given line, updating self.dataLim.
        ")
                        (reparse-symbol indented_block_body) [64122 66049])
                    ("add_patch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66068 66072])
                            ("p" variable nil (reparse-symbol function_parameters) [66074 66075]))                          
                        :documentation "
        Add a :class:`~matplotlib.patches.Patch` *p* to the list of
        axes patches; the clipbox will be set to the Axes clipping
        box.  If the transform is not set, it will be set to
        :attr:`transData`.

        Returns the patch.
        ")
                        (reparse-symbol indented_block_body) [66054 66611])
                    ("_update_patch_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66641 66645])
                            ("patch" variable nil (reparse-symbol function_parameters) [66647 66652]))                          
                        :documentation "update the data limits for patch *p*")
                        (reparse-symbol indented_block_body) [66616 67843])
                    ("add_table" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67862 67866])
                            ("tab" variable nil (reparse-symbol function_parameters) [67868 67871]))                          
                        :documentation "
        Add a :class:`~matplotlib.tables.Table` instance to the
        list of axes tables

        Returns the table.
        ")
                        (reparse-symbol indented_block_body) [67848 68204])
                    ("add_container" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68227 68231])
                            ("container" variable nil (reparse-symbol function_parameters) [68233 68242]))                          
                        :documentation "
        Add a :class:`~matplotlib.container.Container` instance
        to the axes.

        Returns the collection.
        ")
                        (reparse-symbol indented_block_body) [68209 68658])
                    ("_on_units_changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68685 68689])
                            ("scalex" variable nil (reparse-symbol function_parameters) [68691 68697])
                            ("scaley" variable nil (reparse-symbol function_parameters) [68705 68711]))                          
                        :documentation "
        Callback for processing changes to axis units.

        Currently forces updates of data limits and view limits.
        ")
                        (reparse-symbol indented_block_body) [68663 68944])
                    ("relim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68959 68963])
                            ("visible_only" variable nil (reparse-symbol function_parameters) [68965 68977]))                          
                        :documentation "
        Recompute the data limits based on current artists. If you want to
        exclude invisible artists from the calculation, set
        ``visible_only=True``

        At present, :class:`~matplotlib.collections.Collection`
        instances are not supported.
        ")
                        (reparse-symbol indented_block_body) [68949 69796])
                    ("update_datalim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69820 69824])
                            ("xys" variable nil (reparse-symbol function_parameters) [69826 69829])
                            ("updatex" variable nil (reparse-symbol function_parameters) [69831 69838])
                            ("updatey" variable nil (reparse-symbol function_parameters) [69845 69852]))                          
                        :documentation "
        Update the data lim bbox with seq of xy tups or equiv. 2-D array
        ")
                        (reparse-symbol indented_block_body) [69801 70468])
                    ("" code nil (reparse-symbol indented_block_body) [70490 70527])
                    ("update_datalim_numerix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70559 70563])
                            ("x" variable nil (reparse-symbol function_parameters) [70565 70566])
                            ("y" variable nil (reparse-symbol function_parameters) [70568 70569]))                          
                        :documentation "
        Update the data lim bbox with seq of xy tups
        ")
                        (reparse-symbol indented_block_body) [70532 71068])
                    ("update_datalim_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71099 71103])
                            ("bounds" variable nil (reparse-symbol function_parameters) [71105 71111]))                          
                        :documentation "
        Update the datalim to include the given
        :class:`~matplotlib.transforms.Bbox` *bounds*
        ")
                        (reparse-symbol indented_block_body) [71073 71313])
                    ("_process_unit_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71341 71345])
                            ("xdata" variable nil (reparse-symbol function_parameters) [71347 71352])
                            ("ydata" variable nil (reparse-symbol function_parameters) [71359 71364])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [71371 71377]))                          
                        :documentation "Look for unit *kwargs* and update the axis instances as necessary")
                        (reparse-symbol indented_block_body) [71318 72912])
                    ("in_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72929 72933])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [72935 72945]))                          
                        :documentation "
        Return *True* if the given *mouseevent* (in display coords)
        is in the Axes
        ")
                        (reparse-symbol indented_block_body) [72917 73113])
                    ("get_autoscale_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73139 73143]))                          
                        :documentation "
        Get whether autoscaling is applied for both axes on plot commands
        ")
                        (reparse-symbol indented_block_body) [73118 73301])
                    ("get_autoscalex_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73328 73332]))                          
                        :documentation "
        Get whether autoscaling for the x-axis is applied on plot commands
        ")
                        (reparse-symbol indented_block_body) [73306 73468])
                    ("get_autoscaley_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73495 73499]))                          
                        :documentation "
        Get whether autoscaling for the y-axis is applied on plot commands
        ")
                        (reparse-symbol indented_block_body) [73473 73635])
                    ("set_autoscale_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73661 73665])
                            ("b" variable nil (reparse-symbol function_parameters) [73667 73668]))                          
                        :documentation "
        Set whether autoscaling is applied on plot commands

        accepts: [ *True* | *False* ]
        ")
                        (reparse-symbol indented_block_body) [73640 73856])
                    ("set_autoscalex_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73883 73887])
                            ("b" variable nil (reparse-symbol function_parameters) [73889 73890]))                          
                        :documentation "
        Set whether autoscaling for the x-axis is applied on plot commands

        accepts: [ *True* | *False* ]
        ")
                        (reparse-symbol indented_block_body) [73861 74062])
                    ("set_autoscaley_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74089 74093])
                            ("b" variable nil (reparse-symbol function_parameters) [74095 74096]))                          
                        :documentation "
        Set whether autoscaling for the y-axis is applied on plot commands

        accepts: [ *True* | *False* ]
        ")
                        (reparse-symbol indented_block_body) [74067 74268])
                    ("use_sticky_edges" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74308 74312]))                          
                        :documentation "
        When autoscaling, whether to obey all `Artist.sticky_edges`.

        Default is ``True``.

        Setting this to ``False`` ensures that the specified margins
        will be applied, even if the plot includes an image, for
        example, which would otherwise force a view limit to coincide
        with its data limit.

        The changing this property does not change the plot until
        `autoscale` or `autoscale_view` is called.
        ")
                        (reparse-symbol indented_block_body) [74273 74828])
                    ("use_sticky_edges" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74883 74887])
                            ("b" variable nil (reparse-symbol function_parameters) [74889 74890]))                          
                        :decorators 
                          ( ("use_sticky_edges.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [74833 74934])
                    ("set_xmargin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75034 75038])
                            ("m" variable nil (reparse-symbol function_parameters) [75040 75041]))                          
                        :documentation "
        Set padding of X data limits prior to autoscaling.

        *m* times the data interval will be added to each
        end of that interval before it is used in autoscaling.

        accepts: float in range 0 to 1
        ")
                        (reparse-symbol indented_block_body) [75018 75431])
                    ("set_ymargin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75452 75456])
                            ("m" variable nil (reparse-symbol function_parameters) [75458 75459]))                          
                        :documentation "
        Set padding of Y data limits prior to autoscaling.

        *m* times the data interval will be added to each
        end of that interval before it is used in autoscaling.

        accepts: float in range 0 to 1
        ")
                        (reparse-symbol indented_block_body) [75436 75849])
                    ("margins" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75866 75870])
                            ("args" variable nil (reparse-symbol function_parameters) [75872 75877])
                            ("kw" variable nil (reparse-symbol function_parameters) [75879 75883]))                          
                        :documentation "
        Set or retrieve autoscaling margins.

        signatures::

            margins()

        returns xmargin, ymargin

        ::

            margins(margin)

            margins(xmargin, ymargin)

            margins(x=xmargin, y=ymargin)

            margins(..., tight=False)

        All three forms above set the xmargin and ymargin parameters.
        All keyword parameters are optional.  A single argument
        specifies both xmargin and ymargin.  The *tight* parameter
        is passed to :meth:`autoscale_view`, which is executed after
        a margin is changed; the default here is *True*, on the
        assumption that when margins are specified, no additional
        padding to match tick marks is usually desired.  Setting
        *tight* to *None* will preserve the previous setting.

        Specifying any margin changes only the autoscaling; for example,
        if *xmargin* is not None, then *xmargin* times the X data
        interval will be added to each end of that interval before
        it is used in autoscaling.

        ")
                        (reparse-symbol indented_block_body) [75854 77619])
                    ("set_rasterization_zorder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77653 77657])
                            ("z" variable nil (reparse-symbol function_parameters) [77659 77660]))                          
                        :documentation "
        Set zorder value below which artists will be rasterized.  Set
        to `None` to disable rasterizing of artists below a particular
        zorder.
        ")
                        (reparse-symbol indented_block_body) [77624 77909])
                    ("get_rasterization_zorder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77943 77947]))                          
                        :documentation "
        Get zorder value below which artists will be rasterized
        ")
                        (reparse-symbol indented_block_body) [77914 78080])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78099 78103])
                            ("enable" variable nil (reparse-symbol function_parameters) [78105 78111])
                            ("axis" variable nil (reparse-symbol function_parameters) [78118 78122])
                            ("tight" variable nil (reparse-symbol function_parameters) [78131 78136]))                          
                        :documentation "
        Autoscale the axis view to the data (toggle).

        Convenience method for simple axis view autoscaling.
        It turns autoscaling on or off, and then,
        if autoscaling for either axis is on, it performs
        the autoscaling on the specified axis or axes.

        *enable*: [True | False | None]
            True (default) turns autoscaling on, False turns it off.
            None leaves the autoscaling state unchanged.

        *axis*: ['x' | 'y' | 'both']
            which axis to operate on; default is 'both'

        *tight*: [True | False | None]
            If True, set view limits to data limits;
            if False, let the locator and margins expand the view limits;
            if None, use tight scaling if the only artist is an image,
            otherwise treat *tight* as False.
            The *tight* setting is retained for future autoscaling
            until it is explicitly changed.


        Returns None.
        ")
                        (reparse-symbol indented_block_body) [78085 79727])
                    ("autoscale_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79751 79755])
                            ("tight" variable nil (reparse-symbol function_parameters) [79757 79762])
                            ("scalex" variable nil (reparse-symbol function_parameters) [79769 79775])
                            ("scaley" variable nil (reparse-symbol function_parameters) [79782 79788]))                          
                        :documentation "
        Autoscale the view limits using the data limits. You can
        selectively autoscale only a single axis, e.g., the xaxis by
        setting *scaley* to *False*.  The autoscaling preserves any
        axis direction reversal that has already been done.

        If *tight* is *False*, the axis major locator will be used
        to expand the view limits if rcParams['axes.autolimit_mode']
        is 'round_numbers'.  Note that any margins that are in effect
        will be applied first, regardless of whether *tight* is
        *True* or *False*.  Specifying *tight* as *True* or *False*
        saves the setting as a private attribute of the Axes; specifying
        it as *None* (the default) applies the previously saved value.

        The data limits are not updated automatically when artist data are
        changed after the artist has been added to an Axes instance.  In that
        case, use :meth:`matplotlib.axes.Axes.relim` prior to calling
        autoscale_view.
        ")
                        (reparse-symbol indented_block_body) [79732 84413])
                    ("_get_axis_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84437 84441]))                          )
                        (reparse-symbol indented_block_body) [84418 84484])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84538 84542])
                            ("renderer" variable nil (reparse-symbol function_parameters) [84544 84552])
                            ("inframe" variable nil (reparse-symbol function_parameters) [84559 84566]))                          
                        :documentation "Draw everything (plot lines, axes, labels)")
                        (reparse-symbol indented_block_body) [84504 87678])
                    ("draw_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87699 87703])
                            ("a" variable nil (reparse-symbol function_parameters) [87705 87706]))                          
                        :documentation "
        This method can only be used after an initial draw which
        caches the renderer.  It is used to efficiently update Axes
        data (axis ticks, labels, etc are not updated)
        ")
                        (reparse-symbol indented_block_body) [87683 88156])
                    ("redraw_in_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88181 88185]))                          
                        :documentation "
        This method can only be used after an initial draw which
        caches the renderer.  It is used to efficiently update Axes
        data (axis ticks, labels, etc are not updated)
        ")
                        (reparse-symbol indented_block_body) [88161 88656])
                    ("get_renderer_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88684 88688]))                          )
                        (reparse-symbol indented_block_body) [88661 88727])
                    ("get_frame_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88787 88791]))                          
                        :documentation "
        Get whether the axes rectangle patch is drawn
        ")
                        (reparse-symbol indented_block_body) [88770 88901])
                    ("set_frame_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88923 88927])
                            ("b" variable nil (reparse-symbol function_parameters) [88929 88930]))                          
                        :documentation "
        Set whether the axes rectangle patch is drawn

        ACCEPTS: [ *True* | *False* ]
        ")
                        (reparse-symbol indented_block_body) [88906 89102])
                    ("get_axisbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89125 89129]))                          
                        :documentation "
        Get whether axis below is true or not
        ")
                        (reparse-symbol indented_block_body) [89107 89233])
                    ("set_axisbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89256 89260])
                            ("b" variable nil (reparse-symbol function_parameters) [89262 89263]))                          
                        :documentation "
        Set whether the axis ticks and gridlines are above or below most
        artists

        ACCEPTS: [ *True* | *False* | 'line' ]
        ")
                        (reparse-symbol indented_block_body) [89238 89501])
                    ("grid" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89545 89549])
                            ("b" variable nil (reparse-symbol function_parameters) [89551 89552])
                            ("which" variable nil (reparse-symbol function_parameters) [89559 89564])
                            ("axis" variable nil (reparse-symbol function_parameters) [89574 89578])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [89587 89595]))                          
                        :documentation "
        Turn the axes grids on or off.

        Set the axes grids on or off; *b* is a boolean.  (For MATLAB
        compatibility, *b* may also be a string, 'on' or 'off'.)

        If *b* is *None* and ``len(kwargs)==0``, toggle the grid state.  If
        *kwargs* are supplied, it is assumed that you want a grid and *b*
        is thus set to *True*.

        *which* can be 'major' (default), 'minor', or 'both' to control
        whether major tick grids, minor tick grids, or both are affected.

        *axis* can be 'both' (default), 'x', or 'y' to control which
        set of gridlines are drawn.

        *kwargs* are used to set the grid line properties, e.g.,::

           ax.grid(color='r', linestyle='-', linewidth=2)

        Valid :class:`~matplotlib.lines.Line2D` kwargs are

        %(Line2D)s

        ")
                        (reparse-symbol indented_block_body) [89506 90740])
                    ("ticklabel_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90766 90770])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [90772 90780]))                          
                        :documentation "
        Change the `~matplotlib.ticker.ScalarFormatter` used by
        default for linear axes.

        Optional keyword arguments:

          ==============   =========================================
          Keyword          Description
          ==============   =========================================
          *style*          [ 'sci' (or 'scientific') | 'plain' ]
                           plain turns off scientific notation
          *scilimits*      (m, n), pair of integers; if *style*
                           is 'sci', scientific notation will
                           be used for numbers outside the range
                           10`m`:sup: to 10`n`:sup:.
                           Use (0,0) to include all numbers.
          *useOffset*      [True | False | offset]; if True,
                           the offset will be calculated as needed;
                           if False, no offset will be used; if a
                           numeric offset is specified, it will be
                           used.
          *axis*           [ 'x' | 'y' | 'both' ]
          *useLocale*      If True, format the number according to
                           the current locale.  This affects things
                           such as the character used for the
                           decimal separator.  If False, use
                           C-style (English) formatting.  The
                           default setting is controlled by the
                           axes.formatter.use_locale rcparam.
          *useMathText*    If True, render the offset and scientific
                           notation in mathtext
          ==============   =========================================

        Only the major ticks are affected.
        If the method is called when the
        :class:`~matplotlib.ticker.ScalarFormatter` is not the
        :class:`~matplotlib.ticker.Formatter` being used, an
        :exc:`AttributeError` will be raised.

        ")
                        (reparse-symbol indented_block_body) [90745 95237])
                    ("locator_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95261 95265])
                            ("axis" variable nil (reparse-symbol function_parameters) [95267 95271])
                            ("tight" variable nil (reparse-symbol function_parameters) [95280 95285])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [95292 95300]))                          
                        :documentation "
        Control behavior of tick locators.

        Keyword arguments:

        *axis*
            ['x' | 'y' | 'both']  Axis on which to operate;
            default is 'both'.

        *tight*
            [True | False | None] Parameter passed to :meth:`autoscale_view`.
            Default is None, for no change.

        Remaining keyword arguments are passed to directly to the
        :meth:`~matplotlib.ticker.MaxNLocator.set_params` method.

        Typically one might want to reduce the maximum number
        of ticks and use tight bounds when plotting small
        subplots, for example::

            ax.locator_params(tight=True, nbins=4)

        Because the locator is involved in autoscaling,
        :meth:`autoscale_view` is called automatically after
        the parameters are changed.

        This presently works only for the
        :class:`~matplotlib.ticker.MaxNLocator` used
        by default on linear axes, but it may be generalized.
        ")
                        (reparse-symbol indented_block_body) [95242 96585])
                    ("tick_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96606 96610])
                            ("axis" variable nil (reparse-symbol function_parameters) [96612 96616])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [96625 96633]))                          
                        :documentation "Change the appearance of ticks and tick labels.

        Parameters
        ----------
        axis : {'x', 'y', 'both'}, optional
            Which axis to apply the parameters to.

        Other Parameters
        ----------------

        axis : {'x', 'y', 'both'}
            Axis on which to operate; default is 'both'.

        reset : bool
            If *True*, set all parameters to defaults
            before processing other keyword arguments.  Default is
            *False*.

        which : {'major', 'minor', 'both'}
            Default is 'major'; apply arguments to *which* ticks.

        direction : {'in', 'out', 'inout'}
            Puts ticks inside the axes, outside the axes, or both.

        length : float
            Tick length in points.

        width : float
            Tick width in points.

        color : color
            Tick color; accepts any mpl color spec.

        pad : float
            Distance in points between tick and label.

        labelsize : float or str
            Tick label font size in points or as a string (e.g., 'large').

        labelcolor : color
            Tick label color; mpl color spec.

        colors : color
            Changes the tick color and the label color to the same value:
            mpl color spec.

        zorder : float
            Tick and label zorder.

        bottom, top, left, right : bool or  {'on', 'off'}
            controls whether to draw the respective ticks.

        labelbottom, labeltop, labelleft, labelright : bool or  {'on', 'off'}
            controls whether to draw the
            respective tick labels.

        labelrotation : float
            Tick label rotation

        Examples
        --------

        Usage ::

            ax.tick_params(direction='out', length=6, width=2, colors='r')

        This will make all major ticks be red, pointing out of the box,
        and with dimensions 6 points by 2 points.  Tick labels will
        also be red.

        ")
                        (reparse-symbol indented_block_body) [96590 99151])
                    ("set_axis_off" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99173 99177]))                          
                        :documentation "turn off the axis")
                        (reparse-symbol indented_block_body) [99156 99266])
                    ("set_axis_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99287 99291]))                          
                        :documentation "turn on the axis")
                        (reparse-symbol indented_block_body) [99271 99378])
                    ("" code nil (reparse-symbol indented_block_body) [99400 99436])
                    ("get_axis_bgcolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99462 99466]))                          
                        :documentation "Return the axis background color")
                        (reparse-symbol indented_block_body) [99441 99552])
                    ("" code nil (reparse-symbol indented_block_body) [99574 99610])
                    ("set_axis_bgcolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99636 99640])
                            ("color" variable nil (reparse-symbol function_parameters) [99642 99647]))                          
                        :documentation "
        set the axes background color

        ACCEPTS: any matplotlib color - see
        :func:`~matplotlib.pyplot.colors`
        ")
                        (reparse-symbol indented_block_body) [99615 99840])
                    ("invert_xaxis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99916 99920]))                          )
                        (reparse-symbol indented_block_body) [99899 100036])
                    ("xaxis_inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100060 100064]))                          
                        :documentation "Returns *True* if the x-axis is inverted.")
                        (reparse-symbol indented_block_body) [100041 100189])
                    ("get_xbound" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100209 100213]))                          
                        :documentation "Returns the x-axis numerical bounds

        This always returns::

          lowerBound < upperBound

        Returns
        -------
        lowerBound, upperBound : float

        ")
                        (reparse-symbol indented_block_body) [100194 100553])
                    ("set_xbound" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100573 100577])
                            ("lower" variable nil (reparse-symbol function_parameters) [100579 100584])
                            ("upper" variable nil (reparse-symbol function_parameters) [100591 100596]))                          
                        :documentation "
        Set the lower and upper numerical bounds of the x-axis.
        This method will honor axes inversion regardless of parameter order.
        It will not change the _autoscaleXon attribute.
        ")
                        (reparse-symbol indented_block_body) [100558 101432])
                    ("get_xlim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101450 101454]))                          
                        :documentation "
        Get the x-axis range

        Returns
        -------
        xlimits : tuple
            Returns the current x-axis limits as the tuple
            (`left`, `right`).

        Notes
        -----
        The x-axis may be inverted, in which case the `left` value will
        be greater than the `right` value.

        ")
                        (reparse-symbol indented_block_body) [101437 101847])
                    ("_validate_converted_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101883 101887])
                            ("limit" variable nil (reparse-symbol function_parameters) [101889 101894])
                            ("convert" variable nil (reparse-symbol function_parameters) [101896 101903]))                          
                        :documentation "
        Raise ValueError if converted limits are non-finite.

        Note that this function also accepts None as a limit argument.

        Returns
        -------
        The limit value after call to convert(), or None if limit is None.

        ")
                        (reparse-symbol indented_block_body) [101852 102521])
                    ("set_xlim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102539 102543])
                            ("left" variable nil (reparse-symbol function_parameters) [102545 102549])
                            ("right" variable nil (reparse-symbol function_parameters) [102556 102561])
                            ("emit" variable nil (reparse-symbol function_parameters) [102568 102572])
                            ("auto" variable nil (reparse-symbol function_parameters) [102579 102583])
                            ("kw" variable nil (reparse-symbol function_parameters) [102591 102595]))                          
                        :documentation "
        Set the data limits for the x-axis

        Parameters
        ----------
        left : scalar, optional
            The left xlim (default: None, which leaves the left limit
            unchanged).

        right : scalar, optional
            The right xlim (default: None, which leaves the right limit
            unchanged).

        emit : bool, optional
            Whether to notify observers of limit change (default: True).

        auto : bool or None, optional
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off (default action), None leaves unchanged.

        xlimits : tuple, optional
            The left and right xlims may be passed as the tuple
            (`left`, `right`) as the first positional argument (or as
            the `left` keyword argument).

        Returns
        -------
        xlimits : tuple
            Returns the new x-axis limits as (`left`, `right`).

        Notes
        -----
        The `left` value may be greater than the `right` value, in which
        case the x-axis values will decrease from left to right.

        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)

        One limit may be left unchanged.

        >>> set_xlim(right=right_lim)

        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose `x` represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.

        >>> set_xlim(5000, 0)

        ")
                        (reparse-symbol indented_block_body) [102526 106307])
                    ("get_xscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106327 106331]))                          )
                        (reparse-symbol indented_block_body) [106312 106372])
                    ("get_xscale" code nil (reparse-symbol indented_block_body) [106376 106483])
                    ("set_xscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106504 106508])
                            ("value" variable nil (reparse-symbol function_parameters) [106510 106515])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [106517 106525]))                          
                        :documentation "
        Set the x-axis scale

        Parameters
        ----------
        value : {\"linear\", \"log\", \"symlog\", \"logit\"}
            scaling strategy to apply

        Notes
        -----
        Different kwargs are accepted, depending on the scale. See
        the `~matplotlib.scale` module for more information.

        See also
        --------
        matplotlib.scale.LinearScale : linear transfrom

        matplotlib.scale.LogTransform : log transform

        matplotlib.scale.SymmetricalLogTransform : symlog transform

        matplotlib.scale.LogisticTransform : logit transform
        ")
                        (reparse-symbol indented_block_body) [106489 107581])
                    ("get_xticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107601 107605])
                            ("minor" variable nil (reparse-symbol function_parameters) [107607 107612]))                          
                        :documentation "Return the x ticks as a list of locations")
                        (reparse-symbol indented_block_body) [107586 107729])
                    ("set_xticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107749 107753])
                            ("ticks" variable nil (reparse-symbol function_parameters) [107755 107760])
                            ("minor" variable nil (reparse-symbol function_parameters) [107762 107767]))                          
                        :documentation "
        Set the x ticks with list of *ticks*

        Parameters
        ----------
        ticks : list
            List of x-axis tick locations

        minor : bool, optional
            If ``False`` sets major ticks, if ``True`` sets minor ticks.
            Default is ``False``.
        ")
                        (reparse-symbol indented_block_body) [107734 108186])
                    ("get_xmajorticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108216 108220]))                          
                        :documentation "
        Get the xtick major labels

        Returns
        -------
        labels : list
            List of :class:`~matplotlib.text.Text` instances
        ")
                        (reparse-symbol indented_block_body) [108191 108517])
                    ("get_xminorticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108547 108551]))                          
                        :documentation "
        Get the x minor tick labels

        Returns
        -------
        labels : list
            List of :class:`~matplotlib.text.Text` instances
        ")
                        (reparse-symbol indented_block_body) [108522 108849])
                    ("get_xticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108874 108878])
                            ("minor" variable nil (reparse-symbol function_parameters) [108880 108885])
                            ("which" variable nil (reparse-symbol function_parameters) [108893 108898]))                          
                        :documentation "
        Get the x tick labels as a list of :class:`~matplotlib.text.Text`
        instances.

        Parameters
        ----------
        minor : bool, optional
           If True return the minor ticklabels,
           else return the major ticklabels.

        which : None, ('minor', 'major', 'both')
           Overrides `minor`.

           Selects which ticklabels to return

        Returns
        -------
        ret : list
           List of :class:`~matplotlib.text.Text` instances.
        ")
                        (reparse-symbol indented_block_body) [108854 109623])
                    ("set_xticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109648 109652])
                            ("labels" variable nil (reparse-symbol function_parameters) [109654 109660])
                            ("fontdict" variable nil (reparse-symbol function_parameters) [109662 109670])
                            ("minor" variable nil (reparse-symbol function_parameters) [109677 109682])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [109690 109698]))                          
                        :documentation "
        Set the xtick labels with list of string labels

        Parameters
        ----------
        labels : list of str
            list of string labels

        fontdict : dict, optional
            A dictionary controlling the appearance of the ticklabels,
            the default `fontdict` is:

               {'fontsize': rcParams['axes.titlesize'],
                'fontweight' : rcParams['axes.titleweight'],
                'verticalalignment': 'baseline',
                'horizontalalignment': loc}

        minor : bool, optional
            If True select the minor ticklabels,
            else select the minor ticklabels

        Returns
        -------
        A list of `~matplotlib.text.Text` instances

        Other Parameters
        -----------------
        **kwargs : `~matplotlib.text.Text` properties.
        ")
                        (reparse-symbol indented_block_body) [109628 110782])
                    ("invert_yaxis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110804 110808]))                          
                        :documentation "
        Invert the y-axis.
        ")
                        (reparse-symbol indented_block_body) [110787 110946])
                    ("yaxis_inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110970 110974]))                          
                        :documentation "Returns *True* if the y-axis is inverted.")
                        (reparse-symbol indented_block_body) [110951 111099])
                    ("get_ybound" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111119 111123]))                          
                        :documentation "
        Return y-axis numerical bounds in the form of
        ``lowerBound < upperBound``
        ")
                        (reparse-symbol indented_block_body) [111104 111379])
                    ("set_ybound" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111399 111403])
                            ("lower" variable nil (reparse-symbol function_parameters) [111405 111410])
                            ("upper" variable nil (reparse-symbol function_parameters) [111417 111422]))                          
                        :documentation "
        Set the lower and upper numerical bounds of the y-axis.
        This method will honor axes inversion regardless of parameter order.
        It will not change the _autoscaleYon attribute.
        ")
                        (reparse-symbol indented_block_body) [111384 112258])
                    ("get_ylim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112276 112280]))                          
                        :documentation "
        Get the y-axis range

        Returns
        -------
        ylimits : tuple
            Returns the current y-axis limits as the tuple
            (`bottom`, `top`).

        Notes
        -----
        The y-axis may be inverted, in which case the `bottom` value
        will be greater than the `top` value.

        ")
                        (reparse-symbol indented_block_body) [112263 112673])
                    ("set_ylim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112691 112695])
                            ("bottom" variable nil (reparse-symbol function_parameters) [112697 112703])
                            ("top" variable nil (reparse-symbol function_parameters) [112710 112713])
                            ("emit" variable nil (reparse-symbol function_parameters) [112720 112724])
                            ("auto" variable nil (reparse-symbol function_parameters) [112731 112735])
                            ("kw" variable nil (reparse-symbol function_parameters) [112743 112747]))                          
                        :documentation "
        Set the data limits for the y-axis

        Parameters
        ----------
        bottom : scalar, optional
            The bottom ylim (default: None, which leaves the bottom
            limit unchanged).

        top : scalar, optional
            The top ylim (default: None, which leaves the top limit
            unchanged).

        emit : bool, optional
            Whether to notify observers of limit change (default: True).

        auto : bool or None, optional
            Whether to turn on autoscaling of the y-axis. True turns on,
            False turns off (default action), None leaves unchanged.

        ylimits : tuple, optional
            The bottom and top yxlims may be passed as the tuple
            (`bottom`, `top`) as the first positional argument (or as
            the `bottom` keyword argument).

        Returns
        -------
        ylimits : tuple
            Returns the new y-axis limits as (`bottom`, `top`).

        Notes
        -----
        The `bottom` value may be greater than the `top` value, in which
        case the y-axis values will decrease from bottom to top.

        Examples
        --------
        >>> set_ylim(bottom, top)
        >>> set_ylim((bottom, top))
        >>> bottom, top = set_ylim(bottom, top)

        One limit may be left unchanged.

        >>> set_ylim(top=top_lim)

        Limits may be passed in reverse order to flip the direction of
        the y-axis. For example, suppose `y` represents depth of the
        ocean in m. The y-axis limits might be set like the following
        so 5000 m depth is at the bottom of the plot and the surface,
        0 m, is at the top.

        >>> set_ylim(5000, 0)
        ")
                        (reparse-symbol indented_block_body) [112678 116401])
                    ("get_yscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116421 116425]))                          )
                        (reparse-symbol indented_block_body) [116406 116466])
                    ("get_yscale" code nil (reparse-symbol indented_block_body) [116470 116577])
                    ("set_yscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116598 116602])
                            ("value" variable nil (reparse-symbol function_parameters) [116604 116609])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [116611 116619]))                          
                        :documentation "
        Set the y-axis scale

        Parameters
        ----------
        value : {\"linear\", \"log\", \"symlog\", \"logit\"}
            scaling strategy to apply

        Notes
        -----
        Different kwargs are accepted, depending on the scale. See
        the `~matplotlib.scale` module for more information.

        See also
        --------
        matplotlib.scale.LinearScale : linear transfrom

        matplotlib.scale.LogTransform : log transform

        matplotlib.scale.SymmetricalLogTransform : symlog transform

        matplotlib.scale.LogisticTransform : logit transform
        ")
                        (reparse-symbol indented_block_body) [116583 117674])
                    ("get_yticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117694 117698])
                            ("minor" variable nil (reparse-symbol function_parameters) [117700 117705]))                          
                        :documentation "Return the y ticks as a list of locations")
                        (reparse-symbol indented_block_body) [117679 117822])
                    ("set_yticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117842 117846])
                            ("ticks" variable nil (reparse-symbol function_parameters) [117848 117853])
                            ("minor" variable nil (reparse-symbol function_parameters) [117855 117860]))                          
                        :documentation "
        Set the y ticks with list of *ticks*

        Parameters
        ----------
        ticks : sequence
            List of y-axis tick locations

        minor : bool, optional
            If ``False`` sets major ticks, if ``True`` sets minor ticks.
            Default is ``False``.
        ")
                        (reparse-symbol indented_block_body) [117827 118257])
                    ("get_ymajorticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118287 118291]))                          
                        :documentation "
        Get the major y tick labels

        Returns
        -------
        labels : list
            List of :class:`~matplotlib.text.Text` instances
        ")
                        (reparse-symbol indented_block_body) [118262 118589])
                    ("get_yminorticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118619 118623]))                          
                        :documentation "
        Get the minor y tick labels

        Returns
        -------
        labels : list
            List of :class:`~matplotlib.text.Text` instances
        ")
                        (reparse-symbol indented_block_body) [118594 118921])
                    ("get_yticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118946 118950])
                            ("minor" variable nil (reparse-symbol function_parameters) [118952 118957])
                            ("which" variable nil (reparse-symbol function_parameters) [118965 118970]))                          
                        :documentation "
        Get the x tick labels as a list of :class:`~matplotlib.text.Text`
        instances.

        Parameters
        ----------
        minor : bool
           If True return the minor ticklabels,
           else return the major ticklabels

        which : None, ('minor', 'major', 'both')
           Overrides `minor`.

           Selects which ticklabels to return

        Returns
        -------
        ret : list
           List of :class:`~matplotlib.text.Text` instances.
        ")
                        (reparse-symbol indented_block_body) [118926 119684])
                    ("set_yticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119709 119713])
                            ("labels" variable nil (reparse-symbol function_parameters) [119715 119721])
                            ("fontdict" variable nil (reparse-symbol function_parameters) [119723 119731])
                            ("minor" variable nil (reparse-symbol function_parameters) [119738 119743])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [119751 119759]))                          
                        :documentation "
        Set the y-tick labels with list of strings labels

        Parameters
        ----------
        labels : list of str
            list of string labels

        fontdict : dict, optional
            A dictionary controlling the appearance of the ticklabels,
            the default `fontdict` is::

               {'fontsize': rcParams['axes.titlesize'],
                'fontweight' : rcParams['axes.titleweight'],
                'verticalalignment': 'baseline',
                'horizontalalignment': loc}

        minor : bool, optional
            If True select the minor ticklabels,
            else select the minor ticklabels

        Returns
        -------
        A list of `~matplotlib.text.Text` instances.

        Other Parameters
        ----------------
        **kwargs : `~matplotlib.text.Text` properties.
        ")
                        (reparse-symbol indented_block_body) [119689 120803])
                    ("xaxis_date" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [120823 120827])
                            ("tz" variable nil (reparse-symbol function_parameters) [120829 120831]))                          
                        :documentation "
        Sets up x-axis ticks and labels that treat the x data as dates.

        Parameters
        ----------
        tz : string or :class:`tzinfo` instance, optional
            Timezone string or timezone. Defaults to rc value.
        ")
                        (reparse-symbol indented_block_body) [120808 121225])
                    ("yaxis_date" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121245 121249])
                            ("tz" variable nil (reparse-symbol function_parameters) [121251 121253]))                          
                        :documentation "
        Sets up y-axis ticks and labels that treat the y data as dates.

        Parameters
        ----------
        tz : string or :class:`tzinfo` instance, optional
            Timezone string or timezone. Defaults to rc value.
        ")
                        (reparse-symbol indented_block_body) [121230 121550])
                    ("format_xdata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121572 121576])
                            ("x" variable nil (reparse-symbol function_parameters) [121578 121579]))                          
                        :documentation "
        Return *x* string formatted.  This function will use the attribute
        self.fmt_xdata if it is callable, else will fall back on the xaxis
        major formatter
        ")
                        (reparse-symbol indented_block_body) [121555 121975])
                    ("format_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121997 122001])
                            ("y" variable nil (reparse-symbol function_parameters) [122003 122004]))                          
                        :documentation "
        Return y string formatted.  This function will use the
        :attr:`fmt_ydata` attribute if it is callable, else will fall
        back on the yaxis major formatter
        ")
                        (reparse-symbol indented_block_body) [121980 122401])
                    ("format_coord" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122423 122427])
                            ("x" variable nil (reparse-symbol function_parameters) [122429 122430])
                            ("y" variable nil (reparse-symbol function_parameters) [122432 122433]))                          
                        :documentation "Return a format string formatting the *x*, *y* coord")
                        (reparse-symbol indented_block_body) [122406 122735])
                    ("minorticks_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122758 122762]))                          )
                        (reparse-symbol indented_block_body) [122740 123289])
                    ("minorticks_off" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123313 123317]))                          
                        :documentation "Remove minor ticks from the axes.")
                        (reparse-symbol indented_block_body) [123294 123488])
                    ("can_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123538 123542]))                          
                        :documentation "
        Return *True* if this axes supports the zoom box button functionality.
        ")
                        (reparse-symbol indented_block_body) [123525 123668])
                    ("can_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123685 123689]))                          
                        :documentation "
        Return *True* if this axes supports any pan/zoom button functionality.
        ")
                        (reparse-symbol indented_block_body) [123673 123815])
                    ("get_navigate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123837 123841]))                          
                        :documentation "
        Get whether the axes responds to navigation commands
        ")
                        (reparse-symbol indented_block_body) [123820 123959])
                    ("set_navigate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123981 123985])
                            ("b" variable nil (reparse-symbol function_parameters) [123987 123988]))                          
                        :documentation "
        Set whether the axes responds to navigation toolbar commands

        ACCEPTS: [ *True* | *False* ]
        ")
                        (reparse-symbol indented_block_body) [123964 124150])
                    ("get_navigate_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124177 124181]))                          
                        :documentation "
        Get the navigation toolbar button status: 'PAN', 'ZOOM', or None
        ")
                        (reparse-symbol indented_block_body) [124155 124316])
                    ("set_navigate_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124343 124347])
                            ("b" variable nil (reparse-symbol function_parameters) [124349 124350]))                          
                        :documentation "
        Set the navigation toolbar button status;

        .. warning::
            this is not a user-API function.

        ")
                        (reparse-symbol indented_block_body) [124321 124527])
                    ("_get_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124546 124550]))                          
                        :documentation "
        Save information required to reproduce the current view.

        Called before a view is changed, such as during a pan or zoom
        initiated by the user. You may return any information you deem
        necessary to describe the view.

        .. note::

            Intended to be overridden by new projection types, but if not, the
            default implementation saves the view limits. You *must* implement
            :meth:`_set_view` if you implement this method.
        ")
                        (reparse-symbol indented_block_body) [124532 125176])
                    ("_set_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125195 125199])
                            ("view" variable nil (reparse-symbol function_parameters) [125201 125205]))                          
                        :documentation "
        Apply a previously saved view.

        Called when restoring a view, such as with the navigation buttons.

        .. note::

            Intended to be overridden by new projection types, but if not, the
            default implementation restores the view limits. You *must*
            implement :meth:`_get_view` if you implement this method.
        ")
                        (reparse-symbol indented_block_body) [125181 125698])
                    ("_set_view_from_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125727 125731])
                            ("bbox" variable nil (reparse-symbol function_parameters) [125733 125737])
                            ("direction" variable nil (reparse-symbol function_parameters) [125739 125748])
                            ("mode" variable nil (reparse-symbol function_parameters) [125783 125787])
                            ("twinx" variable nil (reparse-symbol function_parameters) [125794 125799])
                            ("twiny" variable nil (reparse-symbol function_parameters) [125807 125812]))                          
                        :documentation "
        Update view from a selection bbox.

        .. note::

            Intended to be overridden by new projection types, but if not, the
            default implementation sets the view limits to the bbox directly.

        Parameters
        ----------

        bbox : 4-tuple or 3 tuple
            * If bbox is a 4 tuple, it is the selected bounding box limits,
                in *display* coordinates.
            * If bbox is a 3 tuple, it is an (xp, yp, scl) triple, where
                (xp,yp) is the center of zooming and scl the scale factor to
                zoom by.

        direction : str
            The direction to apply the bounding box.
                * `'in'` - The bounding box describes the view directly, i.e.,
                           it zooms in.
                * `'out'` - The bounding box describes the size to make the
                            existing view, i.e., it zooms out.

        mode : str or None
            The selection mode, whether to apply the bounding box in only the
            `'x'` direction, `'y'` direction or both (`None`).

        twinx : bool
            Whether this axis is twinned in the *x*-direction.

        twiny : bool
            Whether this axis is twinned in the *y*-direction.
        ")
                        (reparse-symbol indented_block_body) [125703 131087])
                    ("start_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131106 131110])
                            ("x" variable nil (reparse-symbol function_parameters) [131112 131113])
                            ("y" variable nil (reparse-symbol function_parameters) [131115 131116])
                            ("button" variable nil (reparse-symbol function_parameters) [131118 131124]))                          
                        :documentation "
        Called when a pan operation has started.

        *x*, *y* are the mouse coordinates in display coords.
        button is the mouse button number:

        * 1: LEFT
        * 2: MIDDLE
        * 3: RIGHT

        .. note::

            Intended to be overridden by new projection types.

        ")
                        (reparse-symbol indented_block_body) [131092 131702])
                    ("end_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131719 131723]))                          
                        :documentation "
        Called when a pan operation completes (when the mouse button
        is up.)

        .. note::

            Intended to be overridden by new projection types.

        ")
                        (reparse-symbol indented_block_body) [131707 131947])
                    ("drag_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131965 131969])
                            ("button" variable nil (reparse-symbol function_parameters) [131971 131977])
                            ("key" variable nil (reparse-symbol function_parameters) [131979 131982])
                            ("x" variable nil (reparse-symbol function_parameters) [131984 131985])
                            ("y" variable nil (reparse-symbol function_parameters) [131987 131988]))                          
                        :documentation "
        Called when the mouse moves during a pan operation.

        *button* is the mouse button number:

        * 1: LEFT
        * 2: MIDDLE
        * 3: RIGHT

        *key* is a \"shift\" key

        *x*, *y* are the mouse coordinates in display coords.

        .. note::

            Intended to be overridden by new projection types.

        ")
                        (reparse-symbol indented_block_body) [131952 134129])
                    ("" code nil (reparse-symbol indented_block_body) [134151 134158])
                    ("get_cursor_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134184 134188]))                          
                        :documentation "
        Return the cursor propertiess as a (*linewidth*, *color*)
        tuple, where *linewidth* is a float and *color* is an RGBA
        tuple
        ")
                        (reparse-symbol indented_block_body) [134163 134395])
                    ("" code nil (reparse-symbol indented_block_body) [134417 134424])
                    ("set_cursor_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134450 134454])
                            ("args" variable nil (reparse-symbol function_parameters) [134456 134461]))                          
                        :documentation "Set the cursor property as

        Call signature ::

          ax.set_cursor_props(linewidth, color)

        or::

          ax.set_cursor_props((linewidth, color))

        ACCEPTS: a (*float*, *color*) tuple
        ")
                        (reparse-symbol indented_block_body) [134429 134960])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134982 134986]))                          
                        :documentation "return a list of child artists")
                        (reparse-symbol indented_block_body) [134965 135705])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135723 135727])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [135729 135739]))                          
                        :documentation "
        Test whether the mouse event occurred in the axes.

        Returns *True* / *False*, {}
        ")
                        (reparse-symbol indented_block_body) [135710 135999])
                    ("contains_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [136023 136027])
                            ("point" variable nil (reparse-symbol function_parameters) [136029 136034]))                          
                        :documentation "
        Returns *True* if the point (tuple of x,y) is inside the axes
        (the area defined by the its patch). A pixel coordinate is
        required.

        ")
                        (reparse-symbol indented_block_body) [136004 136277])
                    ("pick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [136291 136295])
                            ("args" variable nil (reparse-symbol function_parameters) [136297 136302]))                          
                        :documentation "Trigger pick event

        Call signature::

            pick(mouseevent)

        each child artist will fire a pick event if mouseevent is over
        the artist and the artist has picker set
        ")
                        (reparse-symbol indented_block_body) [136282 136567])
                    ("get_default_bbox_extra_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [136607 136611]))                          )
                        (reparse-symbol indented_block_body) [136572 136712])
                    ("get_tightbbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [136735 136739])
                            ("renderer" variable nil (reparse-symbol function_parameters) [136741 136749])
                            ("call_axes_locator" variable nil (reparse-symbol function_parameters) [136751 136768]))                          
                        :documentation "
        Return the tight bounding box of the axes.
        The dimension of the Bbox in canvas coordinate.

        If *call_axes_locator* is *False*, it does not call the
        _axes_locator attribute, which is necessary to get the correct
        bounding box. ``call_axes_locator==False`` can be used if the
        caller is only intereted in the relative size of the tightbbox
        compared to the axes bbox.
        ")
                        (reparse-symbol indented_block_body) [136717 138395])
                    ("_make_twin_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138420 138424])
                            ("kl" variable nil (reparse-symbol function_parameters) [138426 138429])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [138431 138439]))                          
                        :documentation "
        make a twinx axes of self. This is used for twinx and twiny.
        ")
                        (reparse-symbol indented_block_body) [138400 138629])
                    ("twinx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138644 138648]))                          
                        :documentation "
        Create a twin Axes sharing the xaxis

        Create a new Axes instance with an invisible x-axis and an independent
        y-axis positioned opposite to the original one (i.e. at right). The
        x-axis autoscale setting will be inherited from the original Axes.
        To ensure that the tick marks of both y-axes align, see
        `~matplotlib.ticker.LinearLocator`

        Returns
        -------
        ax_twin : Axes
            The newly created Axes instance

        Notes
        -----
        For those who are 'picking' artists while using twinx, pick
        events are only called for the artists in the top-most axes.
        ")
                        (reparse-symbol indented_block_body) [138634 139676])
                    ("twiny" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [139691 139695]))                          
                        :documentation "
        Create a twin Axes sharing the yaxis

        Create a new Axes instance with an invisible y-axis and an independent
        x-axis positioned opposite to the original one (i.e. at top). The
        y-axis autoscale setting will be inherited from the original Axes.
        To ensure that the tick marks of both x-axes align, see
        `~matplotlib.ticker.LinearLocator`

        Returns
        -------
        ax_twin : Axes
            The newly created Axes instance

        Notes
        -----
        For those who are 'picking' artists while using twiny, pick
        events are only called for the artists in the top-most axes.
        ")
                        (reparse-symbol indented_block_body) [139681 140672])
                    ("get_shared_x_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140699 140703]))                          )
                        (reparse-symbol indented_block_body) [140677 140810])
                    ("get_shared_y_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140837 140841]))                          )
                        (reparse-symbol indented_block_body) [140815 140948]))                  
                :type "class")
                nil [14402 140948]))          
      :file "_base.py"
      :pointmax 140948
      :fsize 140947
      :lastmodtime '(22995 13124 0 0)
      :unmatched-syntax nil))
  :file "!Users!chongchonghe!anaconda3!lib!python3.6!site-packages!matplotlib!axes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
