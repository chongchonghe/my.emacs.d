#+TITLE: ChongChong's Emacs configuration file
#+AUTHOR: Chong-Chong He
#+STARTUP: overview
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes

* About

**I have switched to [[https://github.com/syl20bnr/spacemacs][Spacemacs]] and will gradually move everything in this
configuration file into .spacemacs.d**

This is my Emacs configuration file written in Org mode. It is an
attempt to keep my =~/.emacs.d/init.el= file organized and readable,
as Emacs configuration could be a life-long practice.

The general structure of this org-file is learned from [[https://github.com/larstvei/dot-emacs/blob/master/init.org][this github
repository]].

** How to use this file

- Everything inside ~#+BEGIN_SRC emacs-lisp~ and ~#+END_SRC~ will be
  exported to init.el, the init file of Emacs, after executing =C-c
  C-v t=.
- Editing tips:
  - Use =C-c '= to edit a code block in an individual buffer in an
    individual buffer.


* TODO

- [ ] make =custom-set-variables= not being overwritten by tangle


* Meta

When this configuration is loaded for the first time, the init.el is
the file that is loaded. It should look like this:

#+BEGIN_SRC emacs-lisp :tangle no
  ;; This file replaces itself with the actual configuration at first run.

  ;; We can't tangle without org!
  (require 'org)
  ;; Open the configuration
  (find-file (concat user-emacs-directory "init.org"))
  ;; tangle it
  (org-babel-tangle)
  ;; load it
  (load-file (concat user-emacs-directory "init.el"))
  ;; finally byte-compile it
  (byte-compile-file (concat user-emacs-directory "init.el"))
#+END_SRC

It tangles the org-file, so that this file is overwritten with the
actual configuration. Afterwards, this is not needed, because we can
use =C-c C-v t= to run =org-babel-tangle=, which does the same job.

Alternatively, we can add the following configuration to execute
=org-babel-tangle= after changes. I prefer to not enable this and do
it manually.

#+BEGIN_SRC emacs-lisp :tangle no
  ;; -*- mode: emacs-lisp -*-

  (defun tangle-init ()
    "If the current buffer is 'init.org' the code-blocks are
  tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "init.org")))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (byte-compile-file (concat user-emacs-directory "init.el")))))

  (add-hook 'after-save-hook 'tangle-init)
#+END_SRC

(Not in use) The following config is a common optimization to temporarily disable
garbage collection during initialization.

#+BEGIN_SRC emacs-lisp :tangle no
  ;; -*- mode: emacs-lisp -*-

  (lexical-let ((old-gc-treshold gc-cons-threshold))
    (setq gc-cons-threshold most-positive-fixnum)
    (add-hook 'after-init-hook
              (lambda () (setq gc-cons-threshold old-gc-treshold))))
#+END_SRC


* Packages

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives
        '(("melpa" . "https://melpa.org/packages/")
          ("gnu" . "https://elpa.gnu.org/packages/")
          ("org" . "http://orgmode.org/elpa/")))
  ;;(require 'popwin)

  (add-to-list 'package-archives
               '("MELPA Stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("elpy" . "http://jorgenschaefer.github.io/packages/"))

  (add-to-list 'load-path "~/.emacs.d/pkgs")

  (package-initialize)
  (when (not package-archive-contents)
    (package-refresh-contents))

  (require 'ein)
  (require 'ein-notebook)
  (require 'ein-subpackages)

  (defvar myPackages
    '(better-defaults
      ein
      elpy
      flycheck
      spolky
      ;; py-autopep8
      ))

  ;; This is only needed once, near the top of the file
  (eval-when-compile
    ;; Following line is not needed if use-package.el is in ~/.emacs.d
    (add-to-list 'load-path "../.emacs.d/elpa")
    (require 'use-package))
#+END_SRC


* General config

#+BEGIN_SRC emacs-lisp
  ;; "General setup, just copy and paste"

  (setq inhibit-startup-message t) ;; hide the startup message
  ;; remove backup files (e.g. README.md~)
  (setq make-backup-files nil)
  ;; prevent pop-up window "Async Shell Command" when doing pdf->tex sync
  ;; (setq pop-up-windows nil)
  ;; (call-process-shell-command "okular&" nil 0)
  (add-to-list 'display-buffer-alist
               (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
  (global-linum-mode t) ;; enable line numbers globally
  ;; Use cmd key for meta
  ;; https://superuser.com/questions/297259/set-emacs-meta-key-to-be-the-mac-key
  (setq mac-option-key-is-meta nil
        mac-command-key-is-meta t
        mac-command-modifier 'meta
        mac-option-modifier 'none)
  ;; (global-linum-mode t) ;; enable line numbers globally
  ;; (add-hook 'prog-mode-hook 'column-number-mode)
  ;; (add-hook 'prog-mode-hook 'linum-mode) ;; enable (line number, col number)
  (windmove-default-keybindings)          ;; e.g. Shift-arrow to swith windows
  ;; make swithing windows easier
  ;; (global-set-key (kbd "C-x p") (kbd "C-- C-x o"))
  ;; (global-set-key (kbd "C-x n") (kbd "C-x o"))
  (global-set-key (kbd "M-p") (kbd "C-- C-x o"))
  (global-set-key (kbd "M-n") (kbd "C-x o"))
  (global-set-key (kbd "M-j") 'windmove-down)
  (global-set-key (kbd "M-k") 'windmove-up)
  (global-set-key (kbd "M-h") 'windmove-left)
  (global-set-key (kbd "M-l") 'windmove-right)
  ;; (global-unset-key (kbd "C-x C-c"))
  ;; (global-unset-key (kbd "M-v"))
  (global-set-key (kbd "M-v") 'evil-paste-after)
  ;; Auto fill mode
  (setq default-fill-column 80)
  ;; (add-hook 'text-mode-hook 'turn-on-auto-fill)
  ;; Turn off auto-fill-mode in markdown
  (defun my-markdown-mode-hook ()
    (auto-fill-mode 0))                   ; turn off auto-filling
  (add-hook 'markdown-mode-hook 'my-markdown-mode-hook)
  ;;(popwin-mode 1)
  ;; Method two: use emacs default
  (setq-default
   ;; Column Marker at 80
   whitespace-line-column 80
   whitespace-style       '(face lines-tail))
  (add-hook 'prog-mode-hook #'whitespace-mode)
  ;; dumb-jump
  (dumb-jump-mode)
  (global-set-key (kbd "C-M-o") 'dumb-jump-go)
  ;; Auto revert mode
  (global-auto-revert-mode 1)
  ;; kill/copy whole line
  (defun slick-cut (beg end)
    (interactive
     (if mark-active
         (list (region-beginning) (region-end))
       (list (line-beginning-position) (line-beginning-position 2)))))
  (advice-add 'kill-region :before #'slick-cut)
  (defun slick-copy (beg end)
    (interactive
     (if mark-active
         (list (region-beginning) (region-end))
       (message "Copied line")
       (list (line-beginning-position) (line-beginning-position 2)))))
  (advice-add 'kill-ring-save :before #'slick-copy)
  ;; Indentation
  ;;(setq-default indent-tabs-mode nil)
  (setq tab-width 4)
  ;; (global-set-key (kbd "C-c c") 'compile)
  (global-set-key (kbd "C-c r") 'compile)
  (global-set-key (kbd "C-c m") 'recompile)
  ;; (require 'insert-time)
  ;; (define-key global-map [(control c)(d)] 'insert-date-time)
  ;; (define-key global-map [(control c)(control v)(d)] 'insert-personal-time-stamp)
  ;; Ref: https://stackoverflow.com/questions/384284/how-do-i-rename-an-open-file-in-emacs
  ;; source: http://steve.yegge.googlepages.com/my-dot-emacs-file
  (defun rename-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not filename)
          (message "Buffer '%s' is not visiting a file!" name)
        (if (get-buffer new-name)
            (message "A buffer named '%s' already exists!" new-name)
          (progn
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil))))))
  ;; https://emacsredux.com/blog/2013/05/18/instant-access-to-init-dot-el/
  (defun er-find-user-init-file ()
    "Edit the `user-init-file', in another window."
    (interactive)
    ;; (find-file-other-window user-init-file)
    (find-file user-init-file)
    )
  (global-set-key (kbd "C-c i") (lambda() (interactive)(find-file "~/.emacs.d/init.org")))

  ;; set encoding
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-buffer-file-coding-system 'utf-8-unix)
  (set-clipboard-coding-system 'utf-8-unix)
  (set-file-name-coding-system 'utf-8-unix)
  (set-keyboard-coding-system 'utf-8-unix)
  (set-next-selection-coding-system 'utf-8-unix)
  (set-selection-coding-system 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)
  (setq locale-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC


* mu4e

** Main

*** Set the path of =mu4e= (not in spacemacs)

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (add-to-list
     'load-path "/usr/local/Cellar/mu/1.2.0_1/share/emacs/site-lisp/mu/mu4e"))

  ;; (load-file "~/.my-elips/mail.el")

  ;; Emacs specific (not on Spacemacs)
  ;; (global-set-key (kbd "mu") (kbd "mu4e"))
#+END_SRC

*** Mu4e maildirs extension (not in spacemacs)
Ref: https://github.com/agpchil/mu4e-maildirs-extension. Adds a maildir summary
in =mu4e-main-view=.

#+BEGIN_SRC emacs-lisp
(mu4e-maildirs-extension)
#+END_SRC

*** Essential config

#+BEGIN_SRC emacs-lisp
  (require 'mu4e)      ;; read messages
  (require 'smtpmail)  ;; send messages

  (global-set-key (kbd "C-c e") 'mu4e)

  ;; spell check and org-mu4e
  (add-hook 'mu4e-compose-mode-hook
            (defun my-do-compose-stuff ()
              "My settings for message composition."
              (set-fill-column 72)
              (flyspell-mode)
              ;; (org-mu4e-compose-org-mode)
              ))

  (setq mail-user-agent 'mu4e-user-agent ;; use mu4e for e-mail in emacs
        ;; for mbsync, when move a message to All Mail as archiving
        mu4e-change-filenames-when-moving t
        mu4e-view-show-addresses t
        mu4e-maildir "~/Maildir"
        mu4e-get-mail-command "mbsync umd"
        mu4e-attachment-dir "~/Documents/MailAttachments"
        )

  ;; TODO: try this out
  ;; (setq mu4e-context-policy 'pick-first)
  ;; (setq mu4e-compose-context-policy 'always-ask)

  ;; ;; Not needed because spacemacs has this as default
  ;; ;; Bookmarks
  ;; (setq mu4e-bookmarks
  ;;       `(
  ;;         ("flag:unread AND NOT flag:trashed" "Unread messages" ?u)
  ;;         ("flag:unread" "new messages" ?n)
  ;;         ("date:today..now" "Today's messages" ?t)
  ;;         ("date:7d..now" "Last 7 days" ?w)
  ;;         ("mime:image/*" "Messages with images" ?p)
  ;;         ))

  (setq mu4e-update-interval 60)
  (setq mu4e-search-result-limit 400)
  (setq mu4e-headers-results-limit 500)
  ;; (define-key mu4e-headers-mode-map (kbd "d") nil)

  ;; tell mu4e to use w3m for html rendering.
  ;; (setq mu4e-html2text-command "w3m -T text/html")
  (setq mu4e-html2text-command "w3m -dump -T text/html -o display_link_number=true")

  ;; Alert
  ;; (setq mu4e-alert-interesting-mail-query "flag:unread AND maildir:/INBOX")

  ;; view message in browser by typing 'aV'
  (add-to-list 'mu4e-view-actions
               '("ViewInBrowser" . mu4e-action-view-in-browser) t)

  (setq mu4e-hide-index-messages t) ;; Silence index messages

  ;; show images
  (setq mu4e-view-show-images t)
  ;; use imagemagick, if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  ;; TODO: try this out
  ;; Load the org-mu4e package
  ;; (load "org-mu4e")
  ;; (setq org-mu4e-convert-to-html t)
  ;; (use-package org-mime
  ;;   :ensure t)

  ;; https://emacs.stackexchange.com/questions/52487/mu4e-how-to-stop-the-unarchiving-of-entire-threads-when-new-message-arrives
  ;; TODO: uncomment if necessary
  ;; (setq mu4e-headers-include-related nil)

  ;; ;; sending emails
  ;; (setq user-mail-address "chongchong@astro.umd.edu"
  ;;       user-full-name  "ChongChong He"
  ;;       smtpmail-default-smtp-server "gaia.astro.umd.edu"
  ;;       ;; smtpmail-local-domain "account1.example.com"
  ;;       smtpmail-smtp-server "gaia.astro.umd.edu"
  ;;       ;; smtpmail-stream-type 'starttls
  ;;       ;; smtpmail-smtp-service 587
  ;;       smtpmail-debug-info t)
  ;; from: http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/#getting-set-up-with-mu-and-offlineimap
  ;; (setq sendmail-program "/usr/local/bin/msmtp"
  ;;       send-mail-function 'smtpmail-send-it
  ;;       message-sendmail-f-is-evil t
  ;;       message-sendmail-extra-arguments '("--read-envelope-from")
  ;;       message-send-mail-function 'message-send-mail-with-sendmail)

  ;; (setq mu4e-compose-signature
  ;;    "ChongChong He\n")
  (defun my-mu4e-choose-signature ()
    "Insert one of a number of sigs"
    (interactive)
    (let ((message-signature
           (mu4e-read-option "Signature:"
                             '(("formal" .
                                (concat
                                 "Chong-Chong He\n"
                                 "PhD Student, Department of Astronomy\n"
                                 "University of Maryland, College Park\n"
                                 "E: che1234@umd.edu\n"
                                 "W: http://www.astro.umd.edu/~chongchong"))
                               ("informal" .
                                (concat
                                 "Best,\n"
                                 "ChongChong\n")
                                )
                               ))))
      (message-insert-signature)))
  (add-hook 'mu4e-compose-mode-hook
            (lambda () (local-set-key (kbd "C-c C-w s") #'my-mu4e-choose-signature)))

  ;; use 'fancy' non-ascii characters in various places in mu4e
  (setq mu4e-use-fancy-chars t)

  ;; automatically cc myself
  (setq mu4e-compose-keep-self-cc t)
  ;; (setq mu4e-compose-dont-reply-to-self nil) ;; trying because the above doesn't work

  ;; TODO: Uncomment if necessary
  ;; (setq mu4e-compose-dont-reply-to-self nil) ; ?

  ;; (add-to-list 'file-name-handler-alist '("Drafts/cur/" . draft-auto-save-buffer-name-handler))

  ;; TODO: Uncomment if necessary. Don't know how the default looks in spacemacs
  ;; the headers to show in the headers list -- a pair of a field
  ;; and its width, with `nil' meaning 'unlimited'
  ;; (setq mu4e-headers-fields
  ;;       '(
  ;; 	(:human-date    . 14)    ;; alternatively, use :human-date
  ;; 	(:flags         . 8)
  ;; 	(:from-or-to    . 30)
  ;; 	(:subject       . nil)
  ;; 	)) ;; alternatively, use :thread-subject
  ;; (setq mu4e-split-view 'vertical)
  (setq mu4e-headers-fields
        '(
          (:human-date    . 14)    ;; alternatively, use :human-date
          (:flags         . 6)
          (:from-or-to    . 26)
          (:subject       . 34)
          )) ;; alternatively, use :thread-subject
  ;; (setq mu4e-split-view 'horizontal)  ; default is horizontal
  ;; (setq mu4e-headers-visible-columns 82)
  (setq mu4e-headers-visible-lines 20)
  (add-hook 'mu4e-headers-hook (lambda () (linum-mode 0)))

  (setq message-citation-line-function 'message-insert-formatted-citation-line)
  (setq message-citation-line-format "On %a, %b %d %Y at %R, %f wrote:\n")

  ;; Configs from https://www.reddit.com/r/spacemacs/comments/c8omik/spacemacs_mu4e_emacsw3m_awesome/ that I don't understand
  (setq mu4e-headers-skip-duplicates t)
  (setq mu4e-display-update-status-in-modeline t)
  (setq mu4e-compose-format-flowed t)
  (setq mu4e-compose-complete-only-personal t)
  ;;
  (add-hook 'LaTeX-mode-hook #'visual-line-mode)
  ;;
  (electric-pair-mode)
  (add-hook 'LaTeX-mode-hook
            '(lambda ()
               (define-key LaTeX-mode-map (kbd "$") 'self-insert-command)
               ))

  ;; (setq mu4e-compose-mode-hook
  ;;       (lambda ()
  ;;         ;; (use-hard-newlines -1)
  ;;         (auto-fill-mode)
  ;;         ;; (visual-line-mode)
  ;;         ))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+END_SRC

**Desktop notification**

#+BEGIN_SRC emacs-lisp :tangle no
  (defun enable-mu4e-notification ()
    ;; Desktop notifications for unread emails
    ;; Choose the style you prefer for desktop notifications
    ;; If you are on Linux you can use
    ;; 1. notifications - Emacs lisp implementation of the Desktop Notifications API
    ;; 2. libnotify     - Notifications using the `notify-send' program, requires `notify-send' to be in PATH
    ;;
    ;; On Mac OSX you can set style to
    ;; 1. notifier      - Notifications using the `terminal-notifier' program, requires `terminal-notifier' to be in PATH
    ;; 1. growl         - Notifications using the `growl' program, requires `growlnotify' to be in PATH
    (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
    (mu4e-alert-set-default-style 'notifier)
    ;; Mode Line display of unread emails
    ;; Display of the unread email count in the mode-line
    ;; (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
    (add-hook 'after-init-hook #'mu4e-alert-disable-mode-line-display)
    ;; adding the following snippet to your init file, will instruct
    ;; mu4e-alert to only display the number of unread emails.
    ;; (setq mu4e-alert-email-notification-types '(subjects))
    (setq mu4e-alert-email-notification-types '(count))
    )
  ;; Uncomment the following line and the defun above to enable notification
  (enable-mu4e-notification)
#+END_SRC

**Delete mu4e drafts on successfully sending the mail**.

#+BEGIN_SRC emacs-lisp
  ;; Disable auto-save-mode on compose:
  (setq mu4e-sent-messages-behavior 'delete)
  (add-hook 'mu4e-compose-mode-hook #'(lambda () (auto-save-mode -1)))
#+END_SRC

(Not using) Old solution Ref:
https://emacs.stackexchange.com/questions/21723/how-can-i-delete-mu4e-drafts-on-successfully-sending-the-mail

#+BEGIN_SRC emacs-lisp :tangle no
  (defun draft-auto-save-buffer-name-handler (operation &rest args)
    "for `make-auto-save-file-name' set '.' in front of the file name; do nothing for other operations"
    (if
        (and buffer-file-name (eq operation 'make-auto-save-file-name))
        (concat (file-name-directory buffer-file-name)
                "."
                (file-name-nondirectory buffer-file-name))
      (let ((inhibit-file-name-handlers
             (cons 'draft-auto-save-buffer-name-handler
                   (and (eq inhibit-file-name-operation operation)
                        inhibit-file-name-handlers)))
            (inhibit-file-name-operation operation))
        (apply operation args))))

  (add-to-list 'file-name-handler-alist '("[Gmail].Drafts/cur/" . draft-auto-save-buffer-name-handler))
#+END_SRC

Auto CC self:
(https://emacs.stackexchange.com/questions/52608/how-to-add-a-value-for-cc-or-reply-to-in-each-new-message/52609)

#+BEGIN_SRC emacs-lisp
  (add-hook 'mu4e-compose-mode-hook
            (defun my-add-bcc ()
              "Add a cc: header."
              (save-excursion (message-add-header "Cc: che1234@umd.edu\n"))))

  ;; ;; from https://www.djcbsoftware.nl/code/mu/mu4e/Compose-hooks.html
  ;; (add-hook 'mu4e-compose-mode-hook
  ;;           (lambda()
  ;;             (let* ((ctx (mu4e-context-current))
  ;;                    (name (if ctx (mu4e-context-name ctx))))
  ;;               (when name
  ;;                 (cond
  ;;                  ((string= name "astro")
  ;;                   (save-excursion (message-add-header "Cc: chongchong@astro.umd.edu\n")))
  ;;                  ((string= name "terpmail")
  ;;                   (save-excursion (message-add-header "Cc: che1234@terpmail.umd.edu\n")))
  ;;                  ((string= name "umd")
  ;;                   (save-excursion (message-add-header "Cc: che1234@umd.edu\n")))
  ;; 		 )))))
#+END_SRC

** Composing

#+BEGIN_SRC emacs-lisp
  (require 'org-mime)

  ;; https://www.djcbsoftware.nl/code/mu/mu4e/Writing-messages.html
  (setq mu4e-compose-format-flowed t)
  (add-hook 'mu4e-compose-mode-hook #'(lambda () (auto-fill-mode -1)))

  ;; (defun org-mime-org-buffer-htmlize ()
  ;;   "Create an email buffer containing the current org-mode file
  ;;   exported to html and encoded in both html and in org formats as
  ;;   mime alternatives."
  ;;   (interactive)
  ;;   (org-mime-send-buffer 'html)
  ;;   (message-goto-to))

  ;; (defun htmlize-and-send ()
  ;;   "When in an org-mu4e-compose-org-mode message, htmlize and send it."
  ;;   (interactive)
  ;;   (when (member 'org~mu4e-mime-switch-headers-or-body post-command-hook)
  ;;     (org-mime-htmlize)
  ;;     (message-send-and-exit)))

  ;; (add-hook 'org-ctrl-c-ctrl-c-hook 'htmlize-and-send t)

  ;; (add-hook 'mu4e-compose-mode-hook
  ;;           (defun do-compose-stuff ()
  ;;             "My settings for message composition."
  ;;             (org-mu4e-compose-org-mode)))

#+END_SRC

** Sending email

*** Single account

Ref: https://www.djcbsoftware.nl/code/mu/mu4e/Gmail-configuration.html

#+BEGIN_SRC emacs-lisp
  ;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)

  (setq smtpmail-debug-info t)

  (setq
   sendmail-program "/usr/local/bin/msmtp"
   message-sendmail-f-is-evil t
   message-sendmail-extra-arguments '("--read-envelope-from")
   ;; send-mail-function 'smtpmail-send-it
   ;; message-send-mail-function 'message-send-mail-with-sendmail
   message-send-mail-function 'smtpmail-send-it
   user-full-name "ChongChong He"
   user-mail-address "che1234@umd.edu"
   smtpmail-smtp-user "che1234@umd.edu"
   smtpmail-default-smtp-server "smtp.gmail.com"
   smtpmail-smtp-server "smtp.gmail.com"
   smtpmail-smtp-service 587
   ;; smtpmail-stream-type 'starttls
   starttls-use-gnutls t
   smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
   ;; smtpmail-auth-credentials (expand-file-name "~/.authinfo.gpg")
   smtpmail-debug-info t
   mu4e-compose-keep-self-cc t
   ;; smtpmail-auth-credentials '(("smtp.gmail.com" 587 "che1234@umd.edu" nil))
   ;; testing: removing all the folder def since I don't need
   ;; it. Later will set folder shortcuts
   mu4e-trash-folder "/umd/trash"
   mu4e-sent-folder "/umd/[Gmail].All Mail"
   mu4e-refile-folder "/umd/[Gmail].All Mail"
   mu4e-drafts-folder "/umd/[Gmail].Drafts"
  ; don't save message to Sent Messages, IMAP takes care of this
   mu4e-maildir-shortcuts '( ("/umd/INBOX"               . ?i)
                             ("/umd/[Gmail].Sent Mail"   . ?s)
                             ;; only trash is named differently
                             ("/umd/trash"               . ?t)
                             ("/umd/[Gmail].Drafts"      . ?d)
                             ("/umd/[Gmail].Starred"     . ?*)
                             ("/umd/[Gmail].All Mail"    . ?a)
                             ("/umd/f.Reference"         . ?r)
                             ("/umd/f.Archive"           . ?x)
                           )
   )
#+END_SRC

Reply from the same email as 'to':

#+BEGIN_SRC emacs-lisp :tangle no
  ;; a  list of user's e-mail addresses
  (setq mu4e-user-mail-address-list '("che1234@umd.edu" "chongchong@astro.umd.edu"))

  ;; (defun my-mu4e-set-account ()
  ;;   "Set the account for composing a message."
  ;;   (if mu4e-compose-parent-message
  ;;       (let ((mail (cdr (car (mu4e-message-field mu4e-compose-parent-message :to)))))
  ;;         (if (member mail mu4e-user-mail-address-list)
  ;;             (setq user-mail-address mail)
  ;;           (setq user-mail-address "che1234@umd.edu")))
  ;;     (helm :sources
  ;;           `((name . "Select account: ")
  ;;             (candidates . mu4e-user-mail-address-list)
  ;;             (action . (lambda (candidate) (setq user-mail-address candidate)))))))
  ;; (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)

  ;; Ref: https://www.djcbsoftware.nl/code/mu/mu4e/Compose-hooks.html
  ;; 1) messages to me@foo.example.com should be replied with From:me@foo.example.com
  ;; 2) messages to me@bar.example.com should be replied with From:me@bar.example.com
  ;; 3) all other mail should use From:me@cuux.example.com
  (add-hook 'mu4e-compose-pre-hook
          (defun my-set-from-address ()
              "Set the From address based on the To address of the original."
              (let ((msg mu4e-compose-parent-message)) ;; msg is shorter...
              (when msg
                  (setq user-mail-address
                      (cond
                          ((mu4e-message-contact-field-matches msg :to "che1234@umd.edu")
                          "che1234@umd.edu")
                          ;; ((mu4e-message-contact-field-matches msg :to "che1234@terpmail.umd.edu")
                          ;;  "che1234@terpmail.umd.edu")
                          ((mu4e-message-contact-field-matches msg :to "chongchong@astro.umd.edu")
                          "chongchong@astro.umd.edu")
                          (t "che1234@umd.edu")))))))
#+END_SRC

*** Multiple accounts

Not in use. =:tangle no=.

#+BEGIN_SRC emacs-lisp :tangle no
  ;; Outlook and gmail contexts
  (setq mu4e-contexts
        `(
          ,(make-mu4e-context
            :name "astro"
            :enter-func (lambda () (mu4e-message "Entering the umdastro context"))
            ;; :leave-func (lambda () (mu4e-message "Leaving umdastro context"))
            :leave-func (lambda () (setq
                                    mu4e-maildir-list nil
                                    mu4e~contacts nil))
            ;; we match based on the maildir of the message
            :match-func (lambda (msg)
                          (when msg
                            (string-match-p "^/umdastro" (mu4e-message-field msg :maildir))))
            :vars '( ( user-mail-address . "chongchong@astro.umd.edu" )
                     ( user-full-name . "ChongChong He" )
                     ( smtpmail-smtp-user . "chongchong" )
                     ;; ( smtpmail-default-smtp-server . "gaia.astro.umd.edu" )
                     ( smtpmail-smtp-server . "mailhost.astro.umd.edu" )
                     ( mu4e-trash-folder . "/umdastro/Trash" )
                     ( mu4e-refile-folder . "/umdastro/Archive" )
                     ( mu4e-drafts-folder . "/umdastro/Drafts" )
                     ( mu4e-sent-folder . "/umdastro/Sent Messages" )
                     ;; Save message to Sent Messages, astro IMAP server fails to take care of this
                     ( mu4e-sent-messages-behavior . sent)
                     ( mu4e-maildir-shortcuts . (("/umdastro/INBOX"         . ?i)
                                                 ("/umdastro/Sent Messages" . ?s)
                                                 ("/umdastro/Trash"         . ?t)
                                                 ("/umdastro/Archive"       . ?a)
                                                 ("/umdastro/Drafts"        . ?d)
                                                 ;;          ("/Reference"           . ?r)
                                                 ;;          ;; ("/Waiting"             . ?w)
                                                 ;;          ;; ("/Action Items"        . ?c)
                                                 ))
                     ))
          ,(make-mu4e-context
            :name "terpmail"
            :enter-func (lambda () (mu4e-message "Entering terpmail context"))
            ;; :leave-func (lambda () (mu4e-message "Leaving terpmail context"))
            ;; :leave-func (lambda ()
           ;; 		(setq mu4e-maildir-list nil)
            ;; 		(mu4e-message "Leaving terpmail context"))
            :leave-func (lambda () (setq
                                    mu4e-maildir-list nil
                                    mu4e~contacts nil))
            ;; we match based on the maildir of the message
            :match-func (lambda (msg)
                          (when msg
                            (mu4e-message-contact-field-matches
                             msg '(:from :to :cc :bcc) "che1234@terpmail.umd.edu")
                            (mu4e-message-contact-field-matches
                             msg '(:from :to :cc :bcc) "che1234@umd.edu")
                            ;; (string-match-p "^/terpmail" (mu4e-message-field msg :maildir))
                            ))
            :vars '( ( user-mail-address . "che1234@terpmail.umd.edu" )
                     ( smtpmail-smtp-user . "che1234@terpmail.umd.edu")
                     ( smtpmail-smtp-server . "smtp.gmail.com" )
                     ( smtpmail-smtp-service . 587)
                     ( smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
                     ( smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
                     ( user-full-name . "ChongChong He" )
                     ;; testing: removing all the folder def since I don't need
                     ;; it. Later will set folder shortcuts
                     ;; ???? TODO, where is trash?
                     ( mu4e-trash-folder . "/terpmail/trash" )
                     ( mu4e-sent-folder . "/terpmail/[Gmail].All Mail" )
                     ( mu4e-refile-folder . "/terpmail/[Gmail].All Mail" )
                     ( mu4e-drafts-folder . "/terpmail/[Gmail].Drafts" )
                     ;; don't save message to Sent Messages, IMAP takes care of this
                     ( mu4e-sent-messages-behavior . delete)
                     ( mu4e-maildir-shortcuts . (("/terpmail/INBOX"               . ?i)
                                                 ("/terpmail/[Gmail].Sent Mail"   . ?s)
                                                 ;; only trash is named differently
                                                 ("/terpmail/trash"               . ?t)
                                                 ("/terpmail/[Gmail].Starred"     . ?r)
                                                 ("/terpmail/[Gmail].All Mail"    . ?a)))
                     ))
          ,(make-mu4e-context
            :name "umd"
            :enter-func (lambda () (mu4e-message "Entering umd context"))
            ;; :leave-func (lambda () (mu4e-message "Leaving terpmail context"))
            ;; :leave-func (lambda ()
            ;; 		(setq mu4e-maildir-list nil)
            ;; 		(mu4e-message "Leaving terpmail context"))
            :leave-func (lambda () (setq
                                    mu4e-maildir-list nil
                                    mu4e~contacts nil))
            ;; we match based on the maildir of the message
            :match-func (lambda (msg)
                          (when msg
                            ;; (mu4e-message-contact-field-matches
                            ;;  msg '(:from :to :cc :bcc) "che1234@umd.edu")
                            (string-match-p "^/umd" (mu4e-message-field msg :maildir))
                            ))
            :vars '( ( user-mail-address . "che1234@umd.edu" )
                     ( smtpmail-smtp-user . "che1234@umd.edu")
                     ( smtpmail-smtp-server . "smtp.gmail.com" )
                     ( smtpmail-smtp-service . 587)
                     ( smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
                     ( smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
                     ( user-full-name . "ChongChong He" )
                     ;; testing: removing all the folder def since I don't need
                     ;; it. Later will set folder shortcuts
                     ;; ???? TODO, where is trash?
                     ( mu4e-trash-folder . "/umd/trash" )
                     ( mu4e-sent-folder . "/umd/[Gmail].All Mail" )
                     ( mu4e-refile-folder . "/umd/[Gmail].All Mail" )
                     ( mu4e-drafts-folder . "/umd/[Gmail].Drafts" )
                     ;; don't save message to Sent Messages, IMAP takes care of this
                     ( mu4e-sent-messages-behavior . delete)
                     ( mu4e-maildir-shortcuts . (("/umd/INBOX"               . ?i)
                                                 ("/umd/[Gmail].Sent Mail"   . ?s)
                                                 ;; only trash is named differently
                                                 ("/umd/trash"               . ?t)
                                                 ("/umd/[Gmail].Starred"     . ?r)
                                                 ("/umd/[Gmail].All Mail"    . ?a)))
                     ))
          ))
#+END_SRC

(Not in use since I'm not using contexts) After switching to contexts,
address autocompletion stopped working as
=mu4e-compose-complete-only-personal= is somehow set to =t=.

#+BEGIN_SRC emacs-lisp
  (setq mu4e-compose-complete-only-personal nil)
#+END_SRC


* evil

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/evil")
  ;; This should give you org-mode Tab functionality back. Ref:
  ;; https://stackoverflow.com/questions/22878668/emacs-org-mode-evil-mode-tab-key-not-working
  ;; (setq evil-want-C-i-jump nil)
  (require 'evil)
  (evil-mode 1)
  ;; Use neotree with evil mode
  (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
  (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
  (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
  (with-eval-after-load 'evil
    (defalias #'forward-evil-word #'forward-evil-symbol))

  ;;Exit insert mode by pressing j and then j quickly
                                        ; reference: https://stackoverflow.com/questions/10569165/how-to-map-jj-to-esc-in-emacs-evil-mode
  (setq key-chord-two-keys-delay 0.4)
  (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
  (key-chord-mode 1)
  ;; Add key-chord-mode to minor-mode-alist
  (if (not (assq 'key-chord-mode minor-mode-alist))
      (setq minor-mode-alist
            (cons '(key-chord-mode " KeyC ")
                  minor-mode-alist)))
  ;; Ref: https://stackoverflow.com/questions/20882935/how-to-move-between-visual-lines-and-move-past-newline-in-evil-mode
  ;; Make movement keys work like they should: instead of go to next
  ;; logical line, pressing 'j' leads to the next visual line
  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
                                        ; Make horizontal movement cross lines
  (setq-default evil-cross-lines t)
#+END_SRC


* Langtool

DO NOT USE! Use sublime text instead. Open the current buffer in
sublime with ~M-! subl filename <Enter>~. In sublime text 3, use the
shortcut ~Shift+Ctrl+C~ to start language tool. ~Alt+Down~ and
~Alt+Up~ to navigate, ~alt+shift+F~ to apply suggested correction, and
~al+D~ to ignore.

#+BEGIN_SRC emacs-lisp
  (defun my-langtool-config ()
    ;; Check grammar after saving a text file with LanguageTools
    ;; https://alhassy.github.io/init/
    ;; (use-package langtool
    ;;   :config
    ;;   (setq langtool-language-tool-jar
    ;;         "~/local/LanguageTool-4.8/languagetool-commandline.jar")
    ;;   (setq langtool-default-language "en-US")
    ;;   )

    ;; https://simpleit.rocks/lisp/emacs/writing-in-emacs-checking-spelling-style-and-grammar/
    (setq langtool-language-tool-jar "~/local/LanguageTool-4.8/languagetool-commandline.jar")
    (require 'langtool)
    ;; (add-hook 'markdown-mode-hook
    ;;         (lambda ()
    ;;            (add-hook 'after-save-hook 'langtool-check nil 'make-it-local)))
    ;; (add-hook 'org-mode-hook
    ;;         (lambda ()
    ;;            (add-hook 'after-save-hook 'langtool-check nil 'make-it-local)))

    ;; Quickly check, correct, then clean up /region/ with M-^
    (add-hook 'langtool-error-exists-hook
              (lambda ()
                (langtool-correct-buffer)
                (langtool-check-done)
                ))

    ;; ;; (global-set-key "\M-^" 'langtool-check)
    ;; (global-set-key "\C-x4w" 'langtool-check)
    ;; (global-set-key "\C-x4W" 'langtool-check-done)
    ;; (global-set-key "\C-x4l" 'langtool-switch-default-language)
    ;; (global-set-key "\C-x44" 'langtool-show-message-at-point)
    ;; (global-set-key "\C-x4c" 'langtool-correct-buffer)

    (global-set-key "\C-cgw" 'langtool-check)
    (global-set-key "\C-cgW" 'langtool-check-done)
    (global-set-key "\C-cgc" 'langtool-correct-buffer)
    (global-set-key "\C-cgn" 'langtool-goto-next-error)
    (global-set-key "\C-cgp" 'langtool-goto-previous-error)
    ;; (global-set-key "\C-x4l" 'langtool-switch-default-language)
    ;; (global-set-key "\C-x44" 'langtool-show-message-at-point)

    )

#+END_SRC


* Other configs

#+BEGIN_SRC emacs-lisp
  (defun my-flyspell-config ()
    ;; easy spell check
    (global-set-key (kbd "<f8>") 'ispell-word)
    (global-set-key (kbd "C-S-<f8>") 'flyspell-mode)
    (global-set-key (kbd "C-M-<f8>") 'flyspell-buffer)
    (global-set-key (kbd "C-<f8>") 'flyspell-check-previous-highlighted-word)
    (defun flyspell-check-next-highlighted-word ()
      "Custom function to spell check next highlighted word"
      (interactive)
      (flyspell-goto-next-error)
      (ispell-word)
      )
    (global-set-key (kbd "M-<f8>") 'flyspell-check-next-highlighted-word)
    ;; Enable flyspell mode for texts and flyspell-prog mode for C/Python...
    ;; https://stackoverflow.com/questions/15891808/how-to-enable-automatic-spell-check-by-default
    (add-hook 'text-mode-hook 'flyspell-mode)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    )

  (defun my-hs-config ()
    ;; (hs-minor-mode 1)
    (defun my-hideshow-config ()
      "For use in 'hs-minor-mode-hook'."
      ;;(local-set-key (kbd "C-c p") 'hs-toggle-hiding)
      ;; (local-set-key (kbd "SPC") 'hs-toggle-hiding)
      (local-set-key (kbd "C-c h") 'hs-hide-all)
      (local-set-key (kbd "C-c s") 'hs-show-all)
      (local-set-key (kbd "C-c l") 'hs-hide-level)
      )
    (add-hook 'hs-minor-mode-hook 'my-hideshow-config)
    (add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
    (evil-define-key 'normal hs-minor-mode-map (kbd "SPC") 'hs-toggle-hiding)
    )

  ;; (defun my-folding-mode-config ()
  ;;   ;; https://www.emacswiki.org/emacs/FoldingMode#toc6
  ;;   (setq folding-default-keys-function
  ;;         'folding-bind-backward-compatible-keys)
  ;;   (if (load "folding" 'nomessage 'noerror)
  ;;       (folding-mode-add-find-file-hook))

  ;;   ;; The following is included in the default
  ;;   (folding-add-to-marks-list 'python-mode "#<<<" "#>>>" nil t)
  ;;   (folding-add-to-marks-list 'LaTeX-mode "%{{{" "%}}}" nil t)
  ;;   ;; (folding-add-to-marks-list 'emacs-list-mode ";;{{{" ";;}}}" nil t) ; default?
  ;;   ;; (add-hook 'folding-mode
  ;;   ;; 	    '(local-set-key (kbd "<F9>") (kbd "C-c @ C-q"))
  ;;   ;; 	    )
  ;;   )

  (defun my-python-config ()
    (elpy-enable)
    (elpy-use-ipython)
    (setq elpy-rpc-backend "jedi")
    ;; Disable elpy Vertical Guide Lines for Indentation
    (add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1)))
    (when (require 'flycheck nil t)
      (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
      (add-hook 'elpy-mode-hook 'flycheck-mode))
    ;;(require 'py-autopep8)
    ;; (add-hook 'elpy-mode-hook) ;;'py-autopep8-enable-on-save)
    (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "--simple-prompt -i")
    (define-key ein:notebook-mode-map (kbd "C-c C-x d")
      'ein:worksheet-delete-cell)
    ;; Autoinsert Python comments
    (global-set-key (kbd "<f5>") 'my-insert-comments)
    (defun my-insert-comments (string)
      "Insert \label{ARG} \index{\nameref{ARG}} at point"
      (interactive "sString for \\label and \\nameref: ")
      (insert "##### "  string  " #####"))
    ;;(global-set-key (kbd "<f6>") 'my-insert-docstring)
    ;;(defun my-insert-docstring (string)
    ;;  "Insert \label{ARG} \index{\nameref{ARG}} at point"
    ;;  (interactive "sString for \\label and \\nameref: ")
    ;;  (insert '""" '  string  ' """'))
    (add-hook 'python-mode-hook 'hs-minor-mode)
    ;; jedi, replaced by (setq elpy-rpc-backend "jedi")
    ;; (add-hook 'python-mode-hook 'jedi:setup)
    ;; (setq jedi:complete-on-dot t)
    (setq elpy-rpc-ignored-buffer-size 204800)
    ;; https://emacs.stackexchange.com/questions/36721/evil-mode-interacting-with-python-el-invoking-skeletons
    (setq python-skeleton-autoinsert nil)
    ;; ref: https://www.webscalability.com/blog/2018/07/auto-insert-snippet-for-python-emacs/
    ;; insert python skeleton with auto-insert
    (eval-after-load 'autoinsert
      '(define-auto-insert
         '("\\.\\py\\'" . "python skeleton")
         '(""
           "#!/usr/bin/env python" \n
           "\"\"\" "
           (file-name-nondirectory (buffer-file-name)) \n \n
           "Author: Chong-Chong He (che1234@umd.edu)" \n
           "Written on " (format-time-string "%a, %e %b %Y.") \n
           "\"\"\"" \n
           \n
           "import numpy as np" \n
           "import matplotlib.pyplot as plt" \n
           \n
           > _ \n
           \n
           "if __name__ == '__main__':" \n
           "pass" \n \n)))
    )

  (defun my-html-config ()
    ;; (setq sgml-quick-keys 'close)
    )

  (defun my-CC++-config ()
    (setq-default c-basic-offset 4)
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (and (derived-mode-p 'c-mode 'c++-mode 'java-mode) (require 'ggtags nil 'noerror))
                  (ggtags-mode 1))
                (global-set-key (kbd "M-j") 'windmove-down)
                ))
    ;; (define-skeleton 'c++-throwaway
    ;;   "Throwaway C skeleton"
    ;;   nil
    ;;   "#include <iostream>\n"
    ;;   "#include <string>\n"
    ;;   "#include <fstream>\n"
    ;;   "\n"
    ;;   "using namespace std;\n"
    ;;   "\n"
    ;;   "int main(void){\n"
    ;;   "  \n"
    ;;   "  return 0;\n"
    ;;   "}\n")
    ;; '("\\.\\(CC?\\|cc\\|cxx\\|cpp\\|c++\\)\\'" . "C++-throwaway")
    (eval-after-load 'autoinsert
      '(define-auto-insert
         '("\\.\\(CC?\\|cc\\|cxx\\|cpp\\|c++\\)\\'" . "C++ skeleton")
         '("Short description: "
           "/*" \n
           (file-name-nondirectory (buffer-file-name))
           " -- " str \n
           " */" > \n \n
           "#include <iostream>" \n \n
           "using namespace std;" \n \n
           "int main()" \n
           -4 "{" \n
           > _ \n
           > _ "return 0;" \n
           -4 "}" > \n)))
    ;; https://www.emacswiki.org/emacs/AutoInsertMode
    (eval-after-load 'autoinsert
      '(define-auto-insert '("\\.c\\'" . "C skeleton")
         '(
           "Short description: "
           "/**\n * "
           (file-name-nondirectory (buffer-file-name))
           " -- " str \n
           "*" \n
           "* Written on " (format-time-string "%a, %e %b %Y.") \n
           "*/" > \n \n
           "#include <stdio.h>" \n
           \n
           "int main()" \n
           "{" > \n
           > _ \n
           "}" > \n)))
    )

  (defun my-fortran-config ()
    (require 'f90-namelist-mode)
    (autoload 'f90-mode "f90" "Fortran 90 mode" t)
    (defun my-f90-mode-hook ()
      (setq f90-font-lock-keywords f90-font-lock-keywords-3)
      (abbrev-mode 1)                       ; turn on abbreviation mode
      (turn-on-font-lock)                   ; syntax highlighting
      (auto-fill-mode 0))                   ; turn off auto-filling
    (add-hook 'f90-mode-hook 'my-f90-mode-hook)
    (add-hook 'f90-mode-hook 'auto-fill-mode)
    (add-to-list 'auto-mode-alist '("\\.f9\\'" . f90-mode))
    ;; From https://gist.github.com/aradi/68a4ff8430a735de13f13393213f0ea8
    ;;
    ;; Add this settings to your ~/.emacs file
    ;;
    ;; Fortran settings
    (setq fortran-continuation-string "&")
    (setq fortran-do-indent 2)
    (setq fortran-if-indent 2)
    (setq fortran-structure-indent 2)
    ;; Fortran 90 settings
    (setq f90-do-indent 2)
    (setq f90-if-indent 2)
    (setq f90-type-indent 2)
    (setq f90-program-indent 2)
    (setq f90-continuation-indent 4)
    (setq f90-smart-end 'blink)
    ;; Set Fortran and Fortran 90 mode for appropriate extensions
    (setq auto-mode-alist
          (cons '("\\.F90$" . f90-mode) auto-mode-alist))
    (setq auto-mode-alist
          (cons '("\\.pf$" . f90-mode) auto-mode-alist))
    (setq auto-mode-alist
          (cons '("\\.fpp$" . f90-mode) auto-mode-alist))
    (setq auto-mode-alist
          (cons '("\\.F$" . fortran-mode) auto-mode-alist))
    ;; Swap Return and C-j in Fortran 90 mode
    (add-hook 'f90-mode-hook
              '(lambda ()
                 (define-key f90-mode-map [return] 'f90-indent-new-line)
                 (define-key f90-mode-map "\C-j" 'newline)
                 (setq fill-column 100)
                 (abbrev-mode)
                 (setq-default indent-tabs-mode nil)
                 (setq whitespace-line-column 100)
                 (setq whitespace-style '(face tabs lines-tail empty))
                 (whitespace-mode)
                 ;; (add-to-list 'write-file-functions 'delete-trailing-whitespace)
                 )
              )
    )

  (defun my-julia-config ()
    (add-to-list 'load-path "~/.emacs.d/julia-emacs")
    (require 'julia-mode)
    )

  (defun my-yasnippet-config ()
    (require 'yasnippet)
    (setq yas-triggers-in-field t)
  ;;; https://superuser.com/questions/1006188/can-emacs-be-set-up-to-display-python-code-in-python-mode-and-display-docstrings
                                          ;(add-to-list 'load-path "~/.emacs.d/python-docstring-mode")
                                          ;(require 'python-docstring)
                                          ;(add-hook 'python-mode-hook (lambda () (python-docstring-mode t)))
    (yas/initialize)
    (yas/load-directory "~/.emacs.d/snippets")
    (yas-minor-mode 1)
    ;; (defun my/autoinsert-yas-expand()
    ;;   "Replace text in yasnippet template."
    ;;   (yas/expand-snippet (buffer-string) (point-min) (point-max)))
    )

  (defun my-other-config ()
    (require 'epa-file)
    (epa-file-enable)
    ;; tramp: speed up
    (setq tramp-shell-prompt-pattern "^[^$>\n]*[#$%>] *\\(\[[0-9;]*[a-zA-Z] *\\)*")
    )

  (defun my-theme-config ()
    ;; Customize solarized-light theme

    ;; make the fringe stand out from the background
    (setq solarized-distinct-fringe-background t)

    ;; Don't change the font for some headings and titles
    (setq solarized-use-variable-pitch nil)

    ;; make the modeline high contrast
    (setq solarized-high-contrast-mode-line t)

    ;; Use less bolding
    (setq solarized-use-less-bold t)

    ;; Use more italics
    (setq solarized-use-more-italic t)

    ;; Use less colors for indicators such as git:gutter, flycheck and similar
    (setq solarized-emphasize-indicators nil)

    ;; Don't change size of org-mode headlines (but keep other size-changes)
    (setq solarized-scale-org-headlines nil)

    ;; Avoid all font-size changes
    ;; (setq solarized-height-minus-1 1.0)
    ;; (setq solarized-height-plus-1 1.0)
    ;; (setq solarized-height-plus-2 1.0)
    ;; (setq solarized-height-plus-3 1.0)
    ;; (setq solarized-height-plus-4 1.0)

    ;; (load-theme 'solarized-light t)
    (load-theme 'gruvbox t)

    ;; ---------------------------------------------------------------
    ;; (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
    ;; (load-theme 'spolsky t)
    ;; (set-face-attribute 'default nil :font "SF Mono 12")
    ;; (set-face-attribute 'default nil :font "Source Code Pro 14")
    ;; set font size
    ;; (set-face-attribute 'default (selected-frame) :height 150)
    (set-face-attribute 'default nil :height 150)

  ;;; right 2/3, two columns
                                          ;(set-face-attribute 'default (selected-frame) :height 122)
                                          ;(add-to-list 'default-frame-alist '(height . 71))
                                          ;(add-to-list 'default-frame-alist '(width . 177))
                                          ;(add-to-list 'default-frame-alist '(left . 784))
                                          ;(add-to-list 'default-frame-alist '(top . 0))

    ;; center, large, two columns
    ;; (set-face-attribute 'default (selected-frame) :height 122)
    (add-to-list 'default-frame-alist '(height . 68))
    (add-to-list 'default-frame-alist '(width . 180))
                                          ;(add-to-list 'default-frame-alist '(left . (- 0)))
    (add-to-list 'default-frame-alist '(right . 0))
    (add-to-list 'default-frame-alist '(top . 0))

    ;; Customed theme, be careful. Just copy and paste
    ;; ---------------------------------------------------------------
    ;; (custom-set-faces
    ;;  ;; custom-set-faces was added by Custom.
    ;;  ;; If you edit it by hand, you could mess it up, so be careful.
    ;;  ;; Your init file should contain only one such instance.
    ;;  ;; If there is more than one, they won't work right.
    ;;  '(default ((t (:inherit nil :stipple nil :background "#dcc7b4" :foreground "#1e1e1e" :vertical-boarder "#1e1e1e" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 274 :width normal :foundry "nil" :family "MONACO")))))

    ;; :background "#dcc7b4" :foreground "#1e1e1e"

    ;;  :background "#D4A984" :foreground "#38302B"

    ;; https://stackoverflow.com/questions/52521587/emacs-error-when-i-call-it-in-the-terminal
    ;;(delete-file "~/Library/Colors/Unnamed 3.clr")
    )

  ;;;; Enable all the configs
  ;; (my-general-config)
  ;; (my-evil-config)
  ;; (my-neotree-config)
  (my-flyspell-config)
  (my-python-config)
  (my-hs-config)
  ;; (my-folding-mode-config)
  (my-latex-config)
  (my-html-config)
  ;; (my-mu4e-config)
  (my-CC++-config)
  (my-fortran-config)
  (my-julia-config)
  ;; (my-yasnippet-config)
  (my-theme-config)
  (my-langtool-config)

  (defun test02 ()
    (global-set-key (kbd "<f8>") 'back-to-indentation)
    )
  (test02)

#+END_SRC


* Latex

  #+begin_src emacs-lisp
    (defun my-latex-config ()
      ;; ---------------------------------------------------------------
      ;; AucTeX
      (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (setq-default TeX-master nil) ;; Make emacs aware of multi-file projects
      ;; CDLaTeX
      (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)   ; with AUCTeX LaTeX mode
      ;; (add-hook 'latex-mode-hook 'turn-on-cdlatex)   ; with Emacs latex mode
      (autoload 'helm-bibtex "helm-bibtex" "" t)
      (electric-pair-mode)
      (add-hook 'LaTeX-mode-hook
                '(lambda ()
                   (define-key LaTeX-mode-map (kbd "$") 'self-insert-command)
                   ))
      (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
      ;; (setq reftex-plug-into-auctex t)
      (setq reftex-plug-into-AUCTeX t)
      ;; (setq reftex-default-bibliography '("~/Dropbox/Bib_bibdesk.bib") )
      ;; (setq helm-bibtex-bibliography '("~/Dropbox/Bib_bibdesk.bib") )
      ;; (setq reftex-default-bibliography '("/Users/chongchonghe/Documents/bib_tmp.bib"))
      ;; (setq helm-bibtex-bibliography '("/Users/chongchonghe/Documents/bib_tmp.bib"))
      ;; Enable the clicking feature of the sync
      (add-hook 'LaTeX-mode-hook
                (lambda () (local-set-key (kbd "<S-s-mouse-1>") #'TeX-view))
                )
      (setq TeX-PDF-mode t)	      ;; Compile documents to PDF by default
      ;; Use Skim as viewer, enable source <-> PDF sync
      ;; make latexmk available via C-c C-c
      ;; Note: SyncTeX is setup via ~/.latexmkrc (see below)
      (add-hook 'LaTeX-mode-hook (lambda ()
                                   (push
                                    '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t :help "Run latexmk on file")
                                    TeX-command-list)))
      (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))
      ;; use Skim as default pdf viewer
      ;; Skim's displayline is used for forward search (from .tex to .pdf)
      ;; option -b highlights the current line; option -g opens Skim in the background
      (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
      (setq TeX-view-program-list
            '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

      ;; start emacs in server mode so that skim can talk to it
      (server-start)

      ;; Auto-raise Emacs on activation
      ;; https://sourceforge.net/p/skim-app/wiki/TeX_and_PDF_Synchronization/
      (defun raise-emacs-on-aqua()
        (shell-command "osascript -e 'tell application \"Emacs\" to activate' &"))
      (add-hook 'server-switch-hook 'raise-emacs-on-aqua)

      (add-hook 'LaTex-mode-hook 'LaTeX-math-mode)

      (require 'smartparens-config)
      (add-hook 'LaTex-mode-hook #'smartparens-mode)

      ;; keybindings
      ;; (define-key outline-mode-map [M-left] 'outline-hide-body)
      ;; (define-key outline-mode-map [M-right] 'outline-show-all)
      ;; (define-key outline-mode-map [M-up] 'outline-previous-heading)
      ;; (define-key outline-mode-map [M-down] 'outline-next-heading)
      ;; (define-key outline-mode-map [C-M-left] 'outline-hide-sublevels)
      ;; (define-key outline-mode-map [C-M-right] 'outline-show-children)
      ;; (define-key outline-mode-map [C-M-up] 'outline-previous-visible-heading)
      ;; (define-key outline-mode-map [C-M-down] 'outline-next-visible-heading)

      (defun turn-on-outline-minor-mode () (outline-minor-mode 1))
      (add-hook 'LaTeX-mode-hook 'turn-on-outline-minor-mode)
      (add-hook 'latex-mode-hook 'turn-on-outline-minor-mode)

      (defun turn-on-flycheck-mode () (flycheck-mode 1))
      (add-hook 'LaTeX-mode-hook 'turn-on-flycheck-mode)
      (add-hook 'latex-mode-hook 'turn-on-flycheck-mode)

      (global-set-key [M-left] 'outline-hide-body)
      (global-set-key [M-right] 'outline-show-all)
      (global-set-key [M-up] 'outline-previous-heading)
      (global-set-key [M-down] 'outline-next-heading)
      (global-set-key [C-M-left] 'outline-hide-sublevels)
      (global-set-key [C-M-right] 'outline-show-children)
      (global-set-key [C-M-up] 'outline-previous-visible-heading)
      (global-set-key [C-M-down] 'outline-next-visible-heading)

      (setq TeX-save-query nil)

      (evil-define-key 'normal outline-minor-mode-map (kbd "SPC") 'evil-toggle-fold)
                                            ;(evil-define-key 'normal latex-mode-map (kbd ", l") 'TeX-command-master)
      ;; (evil-define-key 'normal LaTeX-mode-map (kbd ", l") 'TeX-command-master)
      (evil-define-key 'normal LaTeX-mode-map (kbd ", l") 'TeX-command-run-all)
      (evil-define-key 'normal LaTeX-mode-map (kbd ", v") 'TeX-view)
      (evil-define-key 'normal LaTeX-mode-map (kbd "M-w") 'LaTeX-fill-region)

      ;; ;; (setq TeX-command-force "XeLaTeX")
      ;; (setq TeX-command-force "latexmk")

      ;;
      (add-hook 'LaTeX-mode-hook #'visual-line-mode)
      (defun disable-auto-fill-mode () (auto-fill-mode -1))
      (add-hook 'LaTeX-mode-hook 'disable-auto-fill-mode)
      (add-hook 'LaTeX-mode-hook
                (lambda()
                  (local-set-key [C-tab] 'TeX-complete-symbol)))
      )
  #+end_src


* Neotree

Use M-x package-list-packages to install neotree before applying this config.

#+BEGIN_SRC emacs-lisp
  (defun my-neotree-mode-config ()
    "For use in 'neotree-mode-hook'."
    (local-set-key (kbd "j") 'neotree-next-line)
    (local-set-key (kbd "k") 'neotree-previous-line)
    (local-set-key (kbd "C-j") 'neotree-change-root)
    (local-set-key (kbd "C-k") 'neotree-select-up-node)
    (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
    (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
    (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
    (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle)
    )
  (add-hook 'neotree-mode-hook 'my-neotree-mode-config)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'neotree-mode-hook (lambda ()
    (define-key evil-motion-state-local-map (kbd "g") 'neotree-refresh)))
#+END_SRC


* Org

** Main

#+BEGIN_SRC emacs-lisp
  ;; org

  (require 'org)

  ;; load shared .el followed by Emacs specific config
  ;;(load-file "~/.my-elips/org.el")

  ;; Make Org mode work with files ending in .org
  ;; (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  ;; The above is the default in recent emacs
  ;; (setq truncate-lines 'nil)

  (defun my-org-mode-config ()
    (local-set-key "\M-n" 'outline-next-visible-heading)
    (local-set-key "\M-p" 'outline-previous-visible-heading)
    ;; table
    (local-set-key "\C-\M-w" 'org-table-copy-region)
    (local-set-key "\C-\M-y" 'org-table-paste-rectangle)
    (local-set-key "\C-\M-l" 'org-table-sort-lines)
    ;; display images
    (local-set-key "\M-I" 'org-toggle-iimage-in-org)
    ;; TODOlist
    (local-set-key (kbd "\C-c t") 'org-todo)
    ;; fix tab
    (local-set-key "\C-y" 'yank)
    (local-set-key "\M-h" 'windmove-left)
    ;; (local-set-key (kbd "C-c c") 'org-capture)
    ;; (local-set-key (kbd "C-c a") 'org-agenda)
    (local-set-key "\C-cl" 'grg-store-link)
    (local-set-key "\C-cb" 'org-switchb)
    (setq-local truncate-lines 'nil)
    (auto-fill-mode)
    (org-indent-mode)
    )
  (add-hook 'org-mode-hook 'my-org-mode-config)
  ;; https://orgmode.org/manual/Conflicts.html
  ;; Make windmove work in Org mode:
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)
  (define-key org-mode-map (kbd "M-h") 'windmove-left) ;; org conflicts
  (setq org-startup-folded nil)
  ;; <tab> for 'indent-for-tab-command'
  ;; (evil-define-key 'normal org-mode-map (kbd "SPC") #'org-cycle)
  (evil-define-key 'insert org-mode-map (kbd "C-t") #'indent-for-tab-command)
  ;; org compile python
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
  ;; (setq word-wrap 'nil)
  (setq word-wrap 't)

  ;; ; ;; org-agenda
  ;; (use-package org-projectile
  ;;   :bind (("C-c n p" . org-projectile-project-todo-completing-read)
  ;; 	   ;; ("C-c c" . org-capture)
  ;; 	   ;; ("C-c a" . org-agenda)
  ;; 	   )
  ;;   :config
  ;;   (progn
  ;;     (setq org-projectile-projects-file "~/Dropbox/orgfiles/tasks.org")
  ;;     (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
  ;;     (push (org-projectile-project-todo-entry) org-capture-templates))
  ;;   :ensure t)

  (require 'org-mu4e)

  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  ;; Exporting to LaTeX and PDF, formatting
  ;; http://pragmaticemacs.com/emacs/org-mode-basics-v-exporting-your-notes/
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
                 '("bjmarticle"
                   "\\documentclass{article}
  \\usepackage[utf8]{inputenc}
  \\usepackage[T1]{fontenc}
  \\usepackage{graphicx}
  \\usepackage{longtable}
  \\usepackage{hyperref}
  \\usepackage{natbib}
  \\usepackage{amssymb}
  \\usepackage{amsmath}
  \\usepackage{geometry}
  \\geometry{a4paper,margin=0.5in,marginparsep=7pt, marginparwidth=.6in}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC

Disable descriptive (hidden) links
[[https://emacs.stackexchange.com/questions/5387/show-org-mode-hyperlink-as-plain-text/5417][(Reference)]]
#+BEGIN_SRC emacs-lisp
  (setq org-descriptive-links nil)
#+END_SRC

** Org todo and agenda

*** Basics:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (evil-define-key 'normal org-mode-map (kbd "t") 'org-todo)
  (setq org-image-actual-width nil)

  (with-eval-after-load 'org
    (setq org-agenda-files "~/Dropbox/orgfiles/agenda.org")
    (setq org-default-notes-file "~/Dropbox/orgfiles/todos.org")
    (setq org-agenda-confirm-kill t)

    ;;open agenda in current window
    (setq org-agenda-window-setup (quote current-window))
#+END_SRC

*** Org capture
References: https://www.youtube.com/watch?v=KdcXu_RdKI0

Templates:
#+BEGIN_SRC emacs-lisp :tangle no
    (setq org-capture-templates
          '(("t"              ; hotkey
             "Todo list item" ; name
             entry            ; type
             ;; heading type and title
             (file+heading org-default-notes-file "Tasks")
             "* TODO %?\n  %i\n  %a")   ; template
            ))
#+END_SRC

Generally, use =%u/U= (inactive timestamp, [time]) instead of =%t/T=
(active timestamp, <time>), because I don't want the creation of a
todo item in the agenda. Use =%a= for annotation.

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(
          ("t" "Todo (without links)" entry (file+headline "" "Tasks")
           "* TODO [#A] %?\n %U" :empty-lines-before 1)
          ("a" "Tasks (with links)" entry (file+headline "" "Tasks")
           "* TODO [#A] %?\n  %U\n  %a\n" :empty-lines 1)
          ("n" "Notes" entry (file+headline "~/Dropbox/orgfiles/notes.org" "Notes")
           "* %?\n  %U\n" :empty-lines 1)
          ("i" "Ideas" entry (file+headline "~/Dropbox/orgfiles/notes.org" "Ideas")
           "* %?\n  %u\n" :empty-lines-before 1)
          ("f" "Followup" entry (file+headline "" "Followup (emails or tasks)")
           "* FLUP [#B] %?\n  %U\n  %a\n" :empty-lines-before 1)
          ("l" "Later" entry (file+headline "" "Later (emails or tasks)")
           "* TODO [#D] %?\n  %U\n  %a\n" :empty-lines-before 1)
          ;; ("g" "General todo" entry (file+headline "/Users/chongchonghe/tasks.org" "Tasks")
          ;;  "* TODO [#B] %?\n %a" :empty-lines 1)
          )
        )
#+END_SRC

*** Todo and Priority

To set the priority of the current headline, do ~C-c ,~, or
~S-UP~ / ~S_DOWN~.

#+BEGIN_SRC emacs-lisp
  (setq org-default-priority ?A)
  (setq org-highest-priority ?A)
  (setq org-lowest-priority ?D)
  ;;set colours for priorities
  (setq org-priority-faces '((?A . (:foreground "#FF0000" :weight bold))
                             (?B . (:foreground "#FFBF00"))
                             (?C . (:foreground "#79DF46"))
                             (?D . (:foreground "#00A2FF"))))
  ;;Different bullets
  (setq org-bullets-bullet-list '("⚫" "◉" "◆" "▶" "◇"))
  ;; (setq org-todo-keywords
  ;;       '((sequence "TODO" "NEXT" "DOING" "FOLLOWUP" "|" "DONE" "CANCELLED")))
  ;; (setq org-todo-keywords
  ;;       '((sequence "TODO(t!)" "NEXT(n!)" "DOING(o!)" "FOLLOWUP(f!)" "|" "CANCELLED(c!)" "DONE(d!)")))
  (setq org-todo-keywords
        '((sequence "TODO(t!)" "NEXT(n!)" "DOIN(o!)" "FLUP(f!)" "|" "CXLD(c!)" "DONE(d!)")))
  (setq org-todo-keyword-faces
        '(("TODO" . org-warning)
          ("DOIN" . (:foreground "yellow"))
          ("FLUP" . (:foreground "magenta"))
          ;; ("CANCELLED" . (:foreground "white" :background "#4d4d4d" :weight bold))
          ("CXLD" . (:foreground "gray"))
          ("NEXT" . "#008080")))
  )
#+END_SRC

*** Refile

Ref:
https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html

#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '((org-agenda-files :maxlevel . 2)))
#+END_SRC

** org-ref

#+BEGIN_SRC emacs-lisp
  (setq reftex-default-bibliography '("~/Academics/Bib/He-StarCluster.bib"))

  ;; see org-ref for use of these variables
  (setq org-ref-bibliography-notes "~/Dropbox/bibliography/notes.org"
        org-ref-default-bibliography '("~/Academics/Bib/He-StarCluster.bib")
        org-ref-pdf-directory "~/Academics/papers/_org-ref/")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq bibtex-completion-bibliography "~/Academics/Bib/He-StarCluster.bib"
        bibtex-completion-library-path "~/Academics/papers/_org-ref/"
        bibtex-completion-notes-path "~/Dropbox/orfiles/helm-bibtex-notes")

  ;; open pdf with system pdf viewer (works on mac)
  (setq bibtex-completion-pdf-open-function
    (lambda (fpath)
      (start-process "open" "*open*" "open" fpath)))

  ;; alternative
  ;; (setq bibtex-completion-pdf-open-function 'org-open-file)
#+END_SRC

** org export

#+BEGIN_SRC emacs-lisp
  (setq org-use-sub-superscripts '{})
#+END_SRC

*** Embed movie

Use org-links to embed local video. Adapted from this method:
http://endlessparentheses.com/embedding-youtube-videos-with-org-mode-links.html
~[[mv:movie.mp4]]~ will export a html5 video.

#+BEGIN_SRC emacs-lisp
  (defvar mv-iframe-format
    ;; You may want to change your width and height.
    (concat "<video"
            " height=\"500\""
            " style=\"display:block; margin: 0 auto;\" controls>"
            " <source"
            " src=\"%s\""
            " type=\"video/mp4\">"
            "</video>"))

  (org-add-link-type
   "mv"
   (lambda (handle)
     (browse-url
      (concat "https://www.youtube.com/embed/"
              handle)))
   (lambda (path desc backend)
     (cl-case backend
       (html (format mv-iframe-format
                     path (or desc "")))
       (latex (format "\href{%s}{%s}"
                      path (or desc "video"))))))
#+END_SRC

** Others

(Not working) Indent code in org babel src blocks: (from
https://stackoverflow.com/questions/15773354/indent-code-in-org-babel-src-blocks)

#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

** Publishing

Simple test:

#+BEGIN_SRC emacs-lisp
  (setq org-publish-project-alist
        '(("org"
           :base-directory "~/Documents/org/"
           :publishing-directory "~/Documents/publish/"
           :section-numbers nil
           :table-of-contents nil
           :publishing-function org-html-publish-to-html
           ;; :publishing-function 'org-publish-org-to-html
           :style "<link rel=\"stylesheet\"
                  href=\"../style/style.css\"
                  type=\"text/css\"/>")))
#+END_SRC


* PDF-tool

#+BEGIN_SRC emacs-lisp
  (require 'pdf-occur)
  (use-package pdf-tools
    :ensure t
    :mode ("\\.pdf$" . pdf-view-mode)
    :config
    (pdf-tools-install)

    (let ((foreground-orig (car pdf-view-midnight-colors)))
      (setq pdf-view-midnight-colors
            (cons "white" "black")))

    (with-eval-after-load 'evil
      (progn
        (add-to-list 'evil-emacs-state-modes 'pdf-outline-buffer-mode)
        (add-to-list 'evil-emacs-state-modes 'pdf-view-mode))))

  ;; (define-key pdf-occur-global-minor-mode-map (kbd "RET") 'pdf-occur-goto-occurance)

  (use-package org-pdfview
    :ensure t)
#+END_SRC


* Shell

** ansi-term

#+BEGIN_SRC emacs-lisp
  (defun ansi-term-post (&rest _)
    "configuration settings for ansi-term"
    (evil-local-mode -1))
#+END_SRC


* Helm

Ref: https://emacs-helm.github.io/helm/

- https://tuhdo.github.io/helm-intro.html and https://www.sandeepnambiar.com/my-minimal-emacs-setup/
  - TODO: make this work

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind
    ("M-x" . helm-M-x)
    ("C-x C-f" . helm-find-files)
    ;; (global-set-key (kbd "M-x") 'helm-M-x)
    :config
    (require 'helm-config)
    (helm-mode 1)
    (setq helm-split-window-inside-p t
          helm-move-to-line-cycle-in-source t)
    (setq helm-autoresize-max-height 0)
    (setq helm-autoresize-min-height 20)
    (helm-autoresize-mode 1)
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
    (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

    )
#+END_SRC


* Theme

#+BEGIN_SRC emacs-lisp
  ;; (custom-set-variables
  ;;  ;; custom-set-variables was added by Custom.
  ;;  ;; If you edit it by hand, you could mess it up, so be careful.
  ;;  ;; Your init file should contain only one such instance.
  ;;  ;; If there is more than one, they won't work right.
  ;;  '(LaTeX-indent-environment-list
  ;;    (quote
  ;;     (("verbatim" current-indentation)
  ;;      ("verbatim*" current-indentation)
  ;;      ("tabular")
  ;;      ("tabular*")
  ;;      ("align")
  ;;      ("align*")
  ;;      ("array")
  ;;      ("eqnarray")
  ;;      ("eqnarray*")
  ;;      ("displaymath")
  ;;      ("equation")
  ;;      ("equation*")
  ;;      ("picture")
  ;;      ("tabbing"))))
  ;;  '(TeX-source-correlate-method (quote synctex))
  ;;  '(TeX-source-correlate-mode t)
  ;;  '(auto-insert (quote other))
  ;;  ;; '(auto-insert-alist (quote nil))
  ;;  '(custom-safe-themes
  ;;    (quote
  ;;     ("d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" default)))
  ;;  '(org-startup-truncated nil)
  ;;  '(package-selected-packages
  ;;    (quote
  ;;     (org gruvbox-theme magit mu4e-alert helm solarized-theme htmlize ein jedi key-chord popwin yasnippet goto-last-change evil auctex evil-visual-mark-mode markdown-mode flycheck neotree elpy)))
  ;;  '(send-mail-function (quote mailclient-send-it)))

  ;; (custom-set-variables
  ;;  ;; custom-set-variables was added by Custom.
  ;;  ;; If you edit it by hand, you could mess it up, so be careful.
  ;;  ;; Your init file should contain only one such instance.
  ;;  ;; If there is more than one, they won't work right.
  ;;  '(TeX-source-correlate-method (quote synctex))
  ;;  '(TeX-source-correlate-mode t)
  ;;  '(auto-insert (quote other))
  ;;  '(auto-insert-alist (quote nil))
  ;;  '(auto-insert-directory "~/.emacs.d/snippets/auto_insert")
  ;;  '(custom-safe-themes
  ;;    (quote
  ;;     ("d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" default)))
  ;;  '(org-startup-truncated nil)
  ;;  '(package-selected-packages
  ;;    (quote
  ;;     (solarized-theme htmlize ein jedi key-chord popwin yasnippet goto-last-change evil auctex evil-visual-mark-mode markdown-mode flycheck neotree elpy)))
  ;;  '(send-mail-function (quote mailclient-send-it)))

  ;; ;; Auto insert mode
  ;; (require 'autoinsert)
  ;; (auto-insert-mode)
  ;; (setq auto-insert-directory "~/.emacs.d/snippets/auto_insert")
  ;; ;; (setq auto-insert-query nil) ;;; If you don't want to be prompted before insertion
  ;; (define-auto-insert "\.py" "template.py")

  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(LaTeX-indent-environment-list
     (quote
      (("verbatim" current-indentation)
       ("verbatim*" current-indentation)
       ("tabular")
       ("tabular*")
       ("align")
       ("align*")
       ("array")
       ("eqnarray")
       ("eqnarray*")
       ("displaymath")
       ("equation")
       ("equation*")
       ("picture")
       ("tabbing"))))
   '(TeX-source-correlate-method (quote synctex))
   '(TeX-source-correlate-mode t)
   '(custom-safe-themes
     (quote
      ("d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" default)))
   '(org-export-backends (quote (ascii beamer html icalendar latex man md odt)))
   '(org-startup-truncated nil)
   '(package-selected-packages
     (quote
      (langtool mu4e-maildirs-extension vimrc-mode julia-mode org gruvbox-theme magit mu4e-alert helm solarized-theme htmlize ein jedi key-chord popwin yasnippet goto-last-change evil auctex evil-visual-mark-mode markdown-mode flycheck neotree elpy)))
   '(send-mail-function (quote mailclient-send-it)))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+END_SRC

